
master_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b04  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002bc4  08002bc4  00003bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bfc  08002bfc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bfc  08002bfc  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bfc  08002bfc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bfc  08002bfc  00003bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c00  08002c00  00003c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002c04  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002c10  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002c10  00004080  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006bd1  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017b7  00000000  00000000  0000ac05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  0000c3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000550  00000000  00000000  0000cac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e5fe  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a110  00000000  00000000  0001b60e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054b77  00000000  00000000  0002571e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007a295  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017ac  00000000  00000000  0007a2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0007ba84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002bac 	.word	0x08002bac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002bac 	.word	0x08002bac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 f9ed 	bl	8000604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f839 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f8cf 	bl	80003d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000232:	f000 f88d 	bl	8000350 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint16_t slaveADDR = 0x12<<1;
 8000236:	230e      	movs	r3, #14
 8000238:	18fb      	adds	r3, r7, r3
 800023a:	2224      	movs	r2, #36	@ 0x24
 800023c:	801a      	strh	r2, [r3, #0]
  uint8_t TxData[6] = {0x1, 0x2, 0x3, 0x4, 0x5, 0x6};
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4a15      	ldr	r2, [pc, #84]	@ (8000298 <main+0x78>)
 8000242:	6811      	ldr	r1, [r2, #0]
 8000244:	6019      	str	r1, [r3, #0]
 8000246:	8892      	ldrh	r2, [r2, #4]
 8000248:	809a      	strh	r2, [r3, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, slaveADDR, TxData, 6, 1000);
 800024a:	250d      	movs	r5, #13
 800024c:	197c      	adds	r4, r7, r5
 800024e:	1d3a      	adds	r2, r7, #4
 8000250:	230e      	movs	r3, #14
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	8819      	ldrh	r1, [r3, #0]
 8000256:	4811      	ldr	r0, [pc, #68]	@ (800029c <main+0x7c>)
 8000258:	23fa      	movs	r3, #250	@ 0xfa
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	9300      	str	r3, [sp, #0]
 800025e:	2306      	movs	r3, #6
 8000260:	f000 fdc6 	bl	8000df0 <HAL_I2C_Master_Transmit>
 8000264:	0003      	movs	r3, r0
 8000266:	7023      	strb	r3, [r4, #0]

	    if (status == HAL_OK)
 8000268:	197b      	adds	r3, r7, r5
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d106      	bne.n	800027e <main+0x5e>
	    {
	        // Truyền dữ liệu thành công
	        // Thực hiện các hành động khi truyền thành công ở đây
	        HAL_GPIO_TogglePin(GPIOA, led_Pin); // Toggle LED khi truyền thành công
 8000270:	2390      	movs	r3, #144	@ 0x90
 8000272:	05db      	lsls	r3, r3, #23
 8000274:	2110      	movs	r1, #16
 8000276:	0018      	movs	r0, r3
 8000278:	f000 fd09 	bl	8000c8e <HAL_GPIO_TogglePin>
 800027c:	e005      	b.n	800028a <main+0x6a>
	    }
	    else
	    {
	        // Xảy ra lỗi khi truyền dữ liệu
	        // Thực hiện các hành động khi xảy ra lỗi ở đây
	        HAL_GPIO_TogglePin(GPIOA, led1_Pin); // Toggle LED khi truyền thành công
 800027e:	2390      	movs	r3, #144	@ 0x90
 8000280:	05db      	lsls	r3, r3, #23
 8000282:	2108      	movs	r1, #8
 8000284:	0018      	movs	r0, r3
 8000286:	f000 fd02 	bl	8000c8e <HAL_GPIO_TogglePin>
	    }

	  HAL_Delay (1000);
 800028a:	23fa      	movs	r3, #250	@ 0xfa
 800028c:	009b      	lsls	r3, r3, #2
 800028e:	0018      	movs	r0, r3
 8000290:	f000 fa1c 	bl	80006cc <HAL_Delay>
  {
 8000294:	e7d9      	b.n	800024a <main+0x2a>
 8000296:	46c0      	nop			@ (mov r8, r8)
 8000298:	08002bc4 	.word	0x08002bc4
 800029c:	20000028 	.word	0x20000028

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b095      	sub	sp, #84	@ 0x54
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	2420      	movs	r4, #32
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	0018      	movs	r0, r3
 80002ac:	2330      	movs	r3, #48	@ 0x30
 80002ae:	001a      	movs	r2, r3
 80002b0:	2100      	movs	r1, #0
 80002b2:	f002 fc4f 	bl	8002b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b6:	2310      	movs	r3, #16
 80002b8:	18fb      	adds	r3, r7, r3
 80002ba:	0018      	movs	r0, r3
 80002bc:	2310      	movs	r3, #16
 80002be:	001a      	movs	r2, r3
 80002c0:	2100      	movs	r1, #0
 80002c2:	f002 fc47 	bl	8002b54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c6:	003b      	movs	r3, r7
 80002c8:	0018      	movs	r0, r3
 80002ca:	2310      	movs	r3, #16
 80002cc:	001a      	movs	r2, r3
 80002ce:	2100      	movs	r1, #0
 80002d0:	f002 fc40 	bl	8002b54 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d4:	0021      	movs	r1, r4
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2202      	movs	r2, #2
 80002da:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2201      	movs	r2, #1
 80002e0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2210      	movs	r2, #16
 80002e6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2200      	movs	r2, #0
 80002ec:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	0018      	movs	r0, r3
 80002f2:	f001 ff23 	bl	800213c <HAL_RCC_OscConfig>
 80002f6:	1e03      	subs	r3, r0, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002fa:	f000 f8a1 	bl	8000440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fe:	2110      	movs	r1, #16
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2207      	movs	r2, #7
 8000304:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2200      	movs	r2, #0
 800030a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2200      	movs	r2, #0
 8000316:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2100      	movs	r1, #0
 800031c:	0018      	movs	r0, r3
 800031e:	f002 fa27 	bl	8002770 <HAL_RCC_ClockConfig>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000326:	f000 f88b 	bl	8000440 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800032a:	003b      	movs	r3, r7
 800032c:	2220      	movs	r2, #32
 800032e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000330:	003b      	movs	r3, r7
 8000332:	2200      	movs	r2, #0
 8000334:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000336:	003b      	movs	r3, r7
 8000338:	0018      	movs	r0, r3
 800033a:	f002 fb3d 	bl	80029b8 <HAL_RCCEx_PeriphCLKConfig>
 800033e:	1e03      	subs	r3, r0, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000342:	f000 f87d 	bl	8000440 <Error_Handler>
  }
}
 8000346:	46c0      	nop			@ (mov r8, r8)
 8000348:	46bd      	mov	sp, r7
 800034a:	b015      	add	sp, #84	@ 0x54
 800034c:	bd90      	pop	{r4, r7, pc}
	...

08000350 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000354:	4b1b      	ldr	r3, [pc, #108]	@ (80003c4 <MX_I2C1_Init+0x74>)
 8000356:	4a1c      	ldr	r2, [pc, #112]	@ (80003c8 <MX_I2C1_Init+0x78>)
 8000358:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800035a:	4b1a      	ldr	r3, [pc, #104]	@ (80003c4 <MX_I2C1_Init+0x74>)
 800035c:	4a1b      	ldr	r2, [pc, #108]	@ (80003cc <MX_I2C1_Init+0x7c>)
 800035e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000360:	4b18      	ldr	r3, [pc, #96]	@ (80003c4 <MX_I2C1_Init+0x74>)
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000366:	4b17      	ldr	r3, [pc, #92]	@ (80003c4 <MX_I2C1_Init+0x74>)
 8000368:	2201      	movs	r2, #1
 800036a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800036c:	4b15      	ldr	r3, [pc, #84]	@ (80003c4 <MX_I2C1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000372:	4b14      	ldr	r3, [pc, #80]	@ (80003c4 <MX_I2C1_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000378:	4b12      	ldr	r3, [pc, #72]	@ (80003c4 <MX_I2C1_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800037e:	4b11      	ldr	r3, [pc, #68]	@ (80003c4 <MX_I2C1_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000384:	4b0f      	ldr	r3, [pc, #60]	@ (80003c4 <MX_I2C1_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800038a:	4b0e      	ldr	r3, [pc, #56]	@ (80003c4 <MX_I2C1_Init+0x74>)
 800038c:	0018      	movs	r0, r3
 800038e:	f000 fc99 	bl	8000cc4 <HAL_I2C_Init>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000396:	f000 f853 	bl	8000440 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800039a:	4b0a      	ldr	r3, [pc, #40]	@ (80003c4 <MX_I2C1_Init+0x74>)
 800039c:	2100      	movs	r1, #0
 800039e:	0018      	movs	r0, r3
 80003a0:	f001 fe34 	bl	800200c <HAL_I2CEx_ConfigAnalogFilter>
 80003a4:	1e03      	subs	r3, r0, #0
 80003a6:	d001      	beq.n	80003ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003a8:	f000 f84a 	bl	8000440 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003ac:	4b05      	ldr	r3, [pc, #20]	@ (80003c4 <MX_I2C1_Init+0x74>)
 80003ae:	2100      	movs	r1, #0
 80003b0:	0018      	movs	r0, r3
 80003b2:	f001 fe77 	bl	80020a4 <HAL_I2CEx_ConfigDigitalFilter>
 80003b6:	1e03      	subs	r3, r0, #0
 80003b8:	d001      	beq.n	80003be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003ba:	f000 f841 	bl	8000440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003be:	46c0      	nop			@ (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000028 	.word	0x20000028
 80003c8:	40005400 	.word	0x40005400
 80003cc:	2000090e 	.word	0x2000090e

080003d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	0018      	movs	r0, r3
 80003da:	2314      	movs	r3, #20
 80003dc:	001a      	movs	r2, r3
 80003de:	2100      	movs	r1, #0
 80003e0:	f002 fbb8 	bl	8002b54 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e4:	4b15      	ldr	r3, [pc, #84]	@ (800043c <MX_GPIO_Init+0x6c>)
 80003e6:	695a      	ldr	r2, [r3, #20]
 80003e8:	4b14      	ldr	r3, [pc, #80]	@ (800043c <MX_GPIO_Init+0x6c>)
 80003ea:	2180      	movs	r1, #128	@ 0x80
 80003ec:	0289      	lsls	r1, r1, #10
 80003ee:	430a      	orrs	r2, r1
 80003f0:	615a      	str	r2, [r3, #20]
 80003f2:	4b12      	ldr	r3, [pc, #72]	@ (800043c <MX_GPIO_Init+0x6c>)
 80003f4:	695a      	ldr	r2, [r3, #20]
 80003f6:	2380      	movs	r3, #128	@ 0x80
 80003f8:	029b      	lsls	r3, r3, #10
 80003fa:	4013      	ands	r3, r2
 80003fc:	603b      	str	r3, [r7, #0]
 80003fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led1_Pin|led_Pin, GPIO_PIN_RESET);
 8000400:	2390      	movs	r3, #144	@ 0x90
 8000402:	05db      	lsls	r3, r3, #23
 8000404:	2200      	movs	r2, #0
 8000406:	2118      	movs	r1, #24
 8000408:	0018      	movs	r0, r3
 800040a:	f000 fc23 	bl	8000c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led1_Pin led_Pin */
  GPIO_InitStruct.Pin = led1_Pin|led_Pin;
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2218      	movs	r2, #24
 8000412:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2201      	movs	r2, #1
 8000418:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2200      	movs	r2, #0
 8000424:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000426:	1d3a      	adds	r2, r7, #4
 8000428:	2390      	movs	r3, #144	@ 0x90
 800042a:	05db      	lsls	r3, r3, #23
 800042c:	0011      	movs	r1, r2
 800042e:	0018      	movs	r0, r3
 8000430:	f000 faa0 	bl	8000974 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000434:	46c0      	nop			@ (mov r8, r8)
 8000436:	46bd      	mov	sp, r7
 8000438:	b006      	add	sp, #24
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40021000 	.word	0x40021000

08000440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000444:	b672      	cpsid	i
}
 8000446:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000448:	46c0      	nop			@ (mov r8, r8)
 800044a:	e7fd      	b.n	8000448 <Error_Handler+0x8>

0800044c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000452:	4b0f      	ldr	r3, [pc, #60]	@ (8000490 <HAL_MspInit+0x44>)
 8000454:	699a      	ldr	r2, [r3, #24]
 8000456:	4b0e      	ldr	r3, [pc, #56]	@ (8000490 <HAL_MspInit+0x44>)
 8000458:	2101      	movs	r1, #1
 800045a:	430a      	orrs	r2, r1
 800045c:	619a      	str	r2, [r3, #24]
 800045e:	4b0c      	ldr	r3, [pc, #48]	@ (8000490 <HAL_MspInit+0x44>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	2201      	movs	r2, #1
 8000464:	4013      	ands	r3, r2
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046a:	4b09      	ldr	r3, [pc, #36]	@ (8000490 <HAL_MspInit+0x44>)
 800046c:	69da      	ldr	r2, [r3, #28]
 800046e:	4b08      	ldr	r3, [pc, #32]	@ (8000490 <HAL_MspInit+0x44>)
 8000470:	2180      	movs	r1, #128	@ 0x80
 8000472:	0549      	lsls	r1, r1, #21
 8000474:	430a      	orrs	r2, r1
 8000476:	61da      	str	r2, [r3, #28]
 8000478:	4b05      	ldr	r3, [pc, #20]	@ (8000490 <HAL_MspInit+0x44>)
 800047a:	69da      	ldr	r2, [r3, #28]
 800047c:	2380      	movs	r3, #128	@ 0x80
 800047e:	055b      	lsls	r3, r3, #21
 8000480:	4013      	ands	r3, r2
 8000482:	603b      	str	r3, [r7, #0]
 8000484:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000486:	46c0      	nop			@ (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	b002      	add	sp, #8
 800048c:	bd80      	pop	{r7, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	40021000 	.word	0x40021000

08000494 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000494:	b590      	push	{r4, r7, lr}
 8000496:	b08b      	sub	sp, #44	@ 0x2c
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049c:	2414      	movs	r4, #20
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	0018      	movs	r0, r3
 80004a2:	2314      	movs	r3, #20
 80004a4:	001a      	movs	r2, r3
 80004a6:	2100      	movs	r1, #0
 80004a8:	f002 fb54 	bl	8002b54 <memset>
  if(hi2c->Instance==I2C1)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a21      	ldr	r2, [pc, #132]	@ (8000538 <HAL_I2C_MspInit+0xa4>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d13b      	bne.n	800052e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b6:	4b21      	ldr	r3, [pc, #132]	@ (800053c <HAL_I2C_MspInit+0xa8>)
 80004b8:	695a      	ldr	r2, [r3, #20]
 80004ba:	4b20      	ldr	r3, [pc, #128]	@ (800053c <HAL_I2C_MspInit+0xa8>)
 80004bc:	2180      	movs	r1, #128	@ 0x80
 80004be:	0289      	lsls	r1, r1, #10
 80004c0:	430a      	orrs	r2, r1
 80004c2:	615a      	str	r2, [r3, #20]
 80004c4:	4b1d      	ldr	r3, [pc, #116]	@ (800053c <HAL_I2C_MspInit+0xa8>)
 80004c6:	695a      	ldr	r2, [r3, #20]
 80004c8:	2380      	movs	r3, #128	@ 0x80
 80004ca:	029b      	lsls	r3, r3, #10
 80004cc:	4013      	ands	r3, r2
 80004ce:	613b      	str	r3, [r7, #16]
 80004d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	22c0      	movs	r2, #192	@ 0xc0
 80004d6:	00d2      	lsls	r2, r2, #3
 80004d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004da:	0021      	movs	r1, r4
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2212      	movs	r2, #18
 80004e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2201      	movs	r2, #1
 80004e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2203      	movs	r2, #3
 80004ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2204      	movs	r2, #4
 80004f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f4:	187a      	adds	r2, r7, r1
 80004f6:	2390      	movs	r3, #144	@ 0x90
 80004f8:	05db      	lsls	r3, r3, #23
 80004fa:	0011      	movs	r1, r2
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 fa39 	bl	8000974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000502:	4b0e      	ldr	r3, [pc, #56]	@ (800053c <HAL_I2C_MspInit+0xa8>)
 8000504:	69da      	ldr	r2, [r3, #28]
 8000506:	4b0d      	ldr	r3, [pc, #52]	@ (800053c <HAL_I2C_MspInit+0xa8>)
 8000508:	2180      	movs	r1, #128	@ 0x80
 800050a:	0389      	lsls	r1, r1, #14
 800050c:	430a      	orrs	r2, r1
 800050e:	61da      	str	r2, [r3, #28]
 8000510:	4b0a      	ldr	r3, [pc, #40]	@ (800053c <HAL_I2C_MspInit+0xa8>)
 8000512:	69da      	ldr	r2, [r3, #28]
 8000514:	2380      	movs	r3, #128	@ 0x80
 8000516:	039b      	lsls	r3, r3, #14
 8000518:	4013      	ands	r3, r2
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	2017      	movs	r0, #23
 8000524:	f000 f9a2 	bl	800086c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000528:	2017      	movs	r0, #23
 800052a:	f000 f9b4 	bl	8000896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800052e:	46c0      	nop			@ (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b00b      	add	sp, #44	@ 0x2c
 8000534:	bd90      	pop	{r4, r7, pc}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	40005400 	.word	0x40005400
 800053c:	40021000 	.word	0x40021000

08000540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000544:	46c0      	nop			@ (mov r8, r8)
 8000546:	e7fd      	b.n	8000544 <NMI_Handler+0x4>

08000548 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800054c:	46c0      	nop			@ (mov r8, r8)
 800054e:	e7fd      	b.n	800054c <HardFault_Handler+0x4>

08000550 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000554:	46c0      	nop			@ (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800055e:	46c0      	nop			@ (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000568:	f000 f894 	bl	8000694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800056c:	46c0      	nop			@ (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
	...

08000574 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 global interrupt.
  */
void I2C1_IRQHandler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000578:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <I2C1_IRQHandler+0x2c>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	699a      	ldr	r2, [r3, #24]
 800057e:	23e0      	movs	r3, #224	@ 0xe0
 8000580:	00db      	lsls	r3, r3, #3
 8000582:	4013      	ands	r3, r2
 8000584:	d004      	beq.n	8000590 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000586:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <I2C1_IRQHandler+0x2c>)
 8000588:	0018      	movs	r0, r3
 800058a:	f000 fd53 	bl	8001034 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800058e:	e003      	b.n	8000598 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000590:	4b03      	ldr	r3, [pc, #12]	@ (80005a0 <I2C1_IRQHandler+0x2c>)
 8000592:	0018      	movs	r0, r3
 8000594:	f000 fd34 	bl	8001000 <HAL_I2C_EV_IRQHandler>
}
 8000598:	46c0      	nop			@ (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	20000028 	.word	0x20000028

080005a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005a8:	46c0      	nop			@ (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b0:	480d      	ldr	r0, [pc, #52]	@ (80005e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005b2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005b4:	f7ff fff6 	bl	80005a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480c      	ldr	r0, [pc, #48]	@ (80005ec <LoopForever+0x6>)
  ldr r1, =_edata
 80005ba:	490d      	ldr	r1, [pc, #52]	@ (80005f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005bc:	4a0d      	ldr	r2, [pc, #52]	@ (80005f4 <LoopForever+0xe>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a0a      	ldr	r2, [pc, #40]	@ (80005f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d0:	4c0a      	ldr	r4, [pc, #40]	@ (80005fc <LoopForever+0x16>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005de:	f002 fac1 	bl	8002b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e2:	f7ff fe1d 	bl	8000220 <main>

080005e6 <LoopForever>:

LoopForever:
    b LoopForever
 80005e6:	e7fe      	b.n	80005e6 <LoopForever>
  ldr   r0, =_estack
 80005e8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005f4:	08002c04 	.word	0x08002c04
  ldr r2, =_sbss
 80005f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005fc:	20000080 	.word	0x20000080

08000600 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC1_IRQHandler>
	...

08000604 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000608:	4b07      	ldr	r3, [pc, #28]	@ (8000628 <HAL_Init+0x24>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <HAL_Init+0x24>)
 800060e:	2110      	movs	r1, #16
 8000610:	430a      	orrs	r2, r1
 8000612:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000614:	2003      	movs	r0, #3
 8000616:	f000 f809 	bl	800062c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800061a:	f7ff ff17 	bl	800044c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800061e:	2300      	movs	r3, #0
}
 8000620:	0018      	movs	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	40022000 	.word	0x40022000

0800062c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000634:	4b14      	ldr	r3, [pc, #80]	@ (8000688 <HAL_InitTick+0x5c>)
 8000636:	681c      	ldr	r4, [r3, #0]
 8000638:	4b14      	ldr	r3, [pc, #80]	@ (800068c <HAL_InitTick+0x60>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	0019      	movs	r1, r3
 800063e:	23fa      	movs	r3, #250	@ 0xfa
 8000640:	0098      	lsls	r0, r3, #2
 8000642:	f7ff fd61 	bl	8000108 <__udivsi3>
 8000646:	0003      	movs	r3, r0
 8000648:	0019      	movs	r1, r3
 800064a:	0020      	movs	r0, r4
 800064c:	f7ff fd5c 	bl	8000108 <__udivsi3>
 8000650:	0003      	movs	r3, r0
 8000652:	0018      	movs	r0, r3
 8000654:	f000 f92f 	bl	80008b6 <HAL_SYSTICK_Config>
 8000658:	1e03      	subs	r3, r0, #0
 800065a:	d001      	beq.n	8000660 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800065c:	2301      	movs	r3, #1
 800065e:	e00f      	b.n	8000680 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b03      	cmp	r3, #3
 8000664:	d80b      	bhi.n	800067e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	2301      	movs	r3, #1
 800066a:	425b      	negs	r3, r3
 800066c:	2200      	movs	r2, #0
 800066e:	0018      	movs	r0, r3
 8000670:	f000 f8fc 	bl	800086c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <HAL_InitTick+0x64>)
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800067a:	2300      	movs	r3, #0
 800067c:	e000      	b.n	8000680 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
}
 8000680:	0018      	movs	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	b003      	add	sp, #12
 8000686:	bd90      	pop	{r4, r7, pc}
 8000688:	20000000 	.word	0x20000000
 800068c:	20000008 	.word	0x20000008
 8000690:	20000004 	.word	0x20000004

08000694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000698:	4b05      	ldr	r3, [pc, #20]	@ (80006b0 <HAL_IncTick+0x1c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	001a      	movs	r2, r3
 800069e:	4b05      	ldr	r3, [pc, #20]	@ (80006b4 <HAL_IncTick+0x20>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	18d2      	adds	r2, r2, r3
 80006a4:	4b03      	ldr	r3, [pc, #12]	@ (80006b4 <HAL_IncTick+0x20>)
 80006a6:	601a      	str	r2, [r3, #0]
}
 80006a8:	46c0      	nop			@ (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	20000008 	.word	0x20000008
 80006b4:	2000007c 	.word	0x2000007c

080006b8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  return uwTick;
 80006bc:	4b02      	ldr	r3, [pc, #8]	@ (80006c8 <HAL_GetTick+0x10>)
 80006be:	681b      	ldr	r3, [r3, #0]
}
 80006c0:	0018      	movs	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	2000007c 	.word	0x2000007c

080006cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006d4:	f7ff fff0 	bl	80006b8 <HAL_GetTick>
 80006d8:	0003      	movs	r3, r0
 80006da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	3301      	adds	r3, #1
 80006e4:	d005      	beq.n	80006f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <HAL_Delay+0x44>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	001a      	movs	r2, r3
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	189b      	adds	r3, r3, r2
 80006f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	f7ff ffe0 	bl	80006b8 <HAL_GetTick>
 80006f8:	0002      	movs	r2, r0
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	429a      	cmp	r2, r3
 8000702:	d8f7      	bhi.n	80006f4 <HAL_Delay+0x28>
  {
  }
}
 8000704:	46c0      	nop			@ (mov r8, r8)
 8000706:	46c0      	nop			@ (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	b004      	add	sp, #16
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	20000008 	.word	0x20000008

08000714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	0002      	movs	r2, r0
 800071c:	1dfb      	adds	r3, r7, #7
 800071e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000720:	1dfb      	adds	r3, r7, #7
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b7f      	cmp	r3, #127	@ 0x7f
 8000726:	d809      	bhi.n	800073c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000728:	1dfb      	adds	r3, r7, #7
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	001a      	movs	r2, r3
 800072e:	231f      	movs	r3, #31
 8000730:	401a      	ands	r2, r3
 8000732:	4b04      	ldr	r3, [pc, #16]	@ (8000744 <__NVIC_EnableIRQ+0x30>)
 8000734:	2101      	movs	r1, #1
 8000736:	4091      	lsls	r1, r2
 8000738:	000a      	movs	r2, r1
 800073a:	601a      	str	r2, [r3, #0]
  }
}
 800073c:	46c0      	nop			@ (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	b002      	add	sp, #8
 8000742:	bd80      	pop	{r7, pc}
 8000744:	e000e100 	.word	0xe000e100

08000748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	0002      	movs	r2, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	1dfb      	adds	r3, r7, #7
 8000754:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000756:	1dfb      	adds	r3, r7, #7
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b7f      	cmp	r3, #127	@ 0x7f
 800075c:	d828      	bhi.n	80007b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800075e:	4a2f      	ldr	r2, [pc, #188]	@ (800081c <__NVIC_SetPriority+0xd4>)
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	b25b      	sxtb	r3, r3
 8000766:	089b      	lsrs	r3, r3, #2
 8000768:	33c0      	adds	r3, #192	@ 0xc0
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	589b      	ldr	r3, [r3, r2]
 800076e:	1dfa      	adds	r2, r7, #7
 8000770:	7812      	ldrb	r2, [r2, #0]
 8000772:	0011      	movs	r1, r2
 8000774:	2203      	movs	r2, #3
 8000776:	400a      	ands	r2, r1
 8000778:	00d2      	lsls	r2, r2, #3
 800077a:	21ff      	movs	r1, #255	@ 0xff
 800077c:	4091      	lsls	r1, r2
 800077e:	000a      	movs	r2, r1
 8000780:	43d2      	mvns	r2, r2
 8000782:	401a      	ands	r2, r3
 8000784:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	019b      	lsls	r3, r3, #6
 800078a:	22ff      	movs	r2, #255	@ 0xff
 800078c:	401a      	ands	r2, r3
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	0018      	movs	r0, r3
 8000794:	2303      	movs	r3, #3
 8000796:	4003      	ands	r3, r0
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800079c:	481f      	ldr	r0, [pc, #124]	@ (800081c <__NVIC_SetPriority+0xd4>)
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	089b      	lsrs	r3, r3, #2
 80007a6:	430a      	orrs	r2, r1
 80007a8:	33c0      	adds	r3, #192	@ 0xc0
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007ae:	e031      	b.n	8000814 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000820 <__NVIC_SetPriority+0xd8>)
 80007b2:	1dfb      	adds	r3, r7, #7
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	0019      	movs	r1, r3
 80007b8:	230f      	movs	r3, #15
 80007ba:	400b      	ands	r3, r1
 80007bc:	3b08      	subs	r3, #8
 80007be:	089b      	lsrs	r3, r3, #2
 80007c0:	3306      	adds	r3, #6
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	18d3      	adds	r3, r2, r3
 80007c6:	3304      	adds	r3, #4
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	1dfa      	adds	r2, r7, #7
 80007cc:	7812      	ldrb	r2, [r2, #0]
 80007ce:	0011      	movs	r1, r2
 80007d0:	2203      	movs	r2, #3
 80007d2:	400a      	ands	r2, r1
 80007d4:	00d2      	lsls	r2, r2, #3
 80007d6:	21ff      	movs	r1, #255	@ 0xff
 80007d8:	4091      	lsls	r1, r2
 80007da:	000a      	movs	r2, r1
 80007dc:	43d2      	mvns	r2, r2
 80007de:	401a      	ands	r2, r3
 80007e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	019b      	lsls	r3, r3, #6
 80007e6:	22ff      	movs	r2, #255	@ 0xff
 80007e8:	401a      	ands	r2, r3
 80007ea:	1dfb      	adds	r3, r7, #7
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	0018      	movs	r0, r3
 80007f0:	2303      	movs	r3, #3
 80007f2:	4003      	ands	r3, r0
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007f8:	4809      	ldr	r0, [pc, #36]	@ (8000820 <__NVIC_SetPriority+0xd8>)
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	001c      	movs	r4, r3
 8000800:	230f      	movs	r3, #15
 8000802:	4023      	ands	r3, r4
 8000804:	3b08      	subs	r3, #8
 8000806:	089b      	lsrs	r3, r3, #2
 8000808:	430a      	orrs	r2, r1
 800080a:	3306      	adds	r3, #6
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	18c3      	adds	r3, r0, r3
 8000810:	3304      	adds	r3, #4
 8000812:	601a      	str	r2, [r3, #0]
}
 8000814:	46c0      	nop			@ (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	b003      	add	sp, #12
 800081a:	bd90      	pop	{r4, r7, pc}
 800081c:	e000e100 	.word	0xe000e100
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	1e5a      	subs	r2, r3, #1
 8000830:	2380      	movs	r3, #128	@ 0x80
 8000832:	045b      	lsls	r3, r3, #17
 8000834:	429a      	cmp	r2, r3
 8000836:	d301      	bcc.n	800083c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000838:	2301      	movs	r3, #1
 800083a:	e010      	b.n	800085e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <SysTick_Config+0x44>)
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	3a01      	subs	r2, #1
 8000842:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000844:	2301      	movs	r3, #1
 8000846:	425b      	negs	r3, r3
 8000848:	2103      	movs	r1, #3
 800084a:	0018      	movs	r0, r3
 800084c:	f7ff ff7c 	bl	8000748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000850:	4b05      	ldr	r3, [pc, #20]	@ (8000868 <SysTick_Config+0x44>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000856:	4b04      	ldr	r3, [pc, #16]	@ (8000868 <SysTick_Config+0x44>)
 8000858:	2207      	movs	r2, #7
 800085a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800085c:	2300      	movs	r3, #0
}
 800085e:	0018      	movs	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	b002      	add	sp, #8
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	e000e010 	.word	0xe000e010

0800086c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
 8000876:	210f      	movs	r1, #15
 8000878:	187b      	adds	r3, r7, r1
 800087a:	1c02      	adds	r2, r0, #0
 800087c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	187b      	adds	r3, r7, r1
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b25b      	sxtb	r3, r3
 8000886:	0011      	movs	r1, r2
 8000888:	0018      	movs	r0, r3
 800088a:	f7ff ff5d 	bl	8000748 <__NVIC_SetPriority>
}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	b004      	add	sp, #16
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	0002      	movs	r2, r0
 800089e:	1dfb      	adds	r3, r7, #7
 80008a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b25b      	sxtb	r3, r3
 80008a8:	0018      	movs	r0, r3
 80008aa:	f7ff ff33 	bl	8000714 <__NVIC_EnableIRQ>
}
 80008ae:	46c0      	nop			@ (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b002      	add	sp, #8
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	0018      	movs	r0, r3
 80008c2:	f7ff ffaf 	bl	8000824 <SysTick_Config>
 80008c6:	0003      	movs	r3, r0
}
 80008c8:	0018      	movs	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b002      	add	sp, #8
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008d8:	210f      	movs	r1, #15
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2221      	movs	r2, #33	@ 0x21
 80008e4:	5c9b      	ldrb	r3, [r3, r2]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d006      	beq.n	80008fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2204      	movs	r2, #4
 80008f0:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
 80008f8:	e028      	b.n	800094c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	210e      	movs	r1, #14
 8000906:	438a      	bics	r2, r1
 8000908:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2101      	movs	r1, #1
 8000916:	438a      	bics	r2, r1
 8000918:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000922:	2101      	movs	r1, #1
 8000924:	4091      	lsls	r1, r2
 8000926:	000a      	movs	r2, r1
 8000928:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2221      	movs	r2, #33	@ 0x21
 800092e:	2101      	movs	r1, #1
 8000930:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2220      	movs	r2, #32
 8000936:	2100      	movs	r1, #0
 8000938:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800093e:	2b00      	cmp	r3, #0
 8000940:	d004      	beq.n	800094c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	0010      	movs	r0, r2
 800094a:	4798      	blx	r3
    }
  }
  return status;
 800094c:	230f      	movs	r3, #15
 800094e:	18fb      	adds	r3, r7, r3
 8000950:	781b      	ldrb	r3, [r3, #0]
}
 8000952:	0018      	movs	r0, r3
 8000954:	46bd      	mov	sp, r7
 8000956:	b004      	add	sp, #16
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2221      	movs	r2, #33	@ 0x21
 8000966:	5c9b      	ldrb	r3, [r3, r2]
 8000968:	b2db      	uxtb	r3, r3
}
 800096a:	0018      	movs	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	b002      	add	sp, #8
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000982:	e14f      	b.n	8000c24 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2101      	movs	r1, #1
 800098a:	697a      	ldr	r2, [r7, #20]
 800098c:	4091      	lsls	r1, r2
 800098e:	000a      	movs	r2, r1
 8000990:	4013      	ands	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d100      	bne.n	800099c <HAL_GPIO_Init+0x28>
 800099a:	e140      	b.n	8000c1e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	2203      	movs	r2, #3
 80009a2:	4013      	ands	r3, r2
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d005      	beq.n	80009b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2203      	movs	r2, #3
 80009ae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d130      	bne.n	8000a16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	2203      	movs	r2, #3
 80009c0:	409a      	lsls	r2, r3
 80009c2:	0013      	movs	r3, r2
 80009c4:	43da      	mvns	r2, r3
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	4013      	ands	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	68da      	ldr	r2, [r3, #12]
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	409a      	lsls	r2, r3
 80009d6:	0013      	movs	r3, r2
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4313      	orrs	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009ea:	2201      	movs	r2, #1
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	409a      	lsls	r2, r3
 80009f0:	0013      	movs	r3, r2
 80009f2:	43da      	mvns	r2, r3
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	4013      	ands	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	091b      	lsrs	r3, r3, #4
 8000a00:	2201      	movs	r2, #1
 8000a02:	401a      	ands	r2, r3
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	409a      	lsls	r2, r3
 8000a08:	0013      	movs	r3, r2
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	2b03      	cmp	r3, #3
 8000a20:	d017      	beq.n	8000a52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	0013      	movs	r3, r2
 8000a32:	43da      	mvns	r2, r3
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	4013      	ands	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	689a      	ldr	r2, [r3, #8]
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	409a      	lsls	r2, r3
 8000a44:	0013      	movs	r3, r2
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	2203      	movs	r2, #3
 8000a58:	4013      	ands	r3, r2
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d123      	bne.n	8000aa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	08da      	lsrs	r2, r3, #3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3208      	adds	r2, #8
 8000a66:	0092      	lsls	r2, r2, #2
 8000a68:	58d3      	ldr	r3, [r2, r3]
 8000a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	2207      	movs	r2, #7
 8000a70:	4013      	ands	r3, r2
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	220f      	movs	r2, #15
 8000a76:	409a      	lsls	r2, r3
 8000a78:	0013      	movs	r3, r2
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	691a      	ldr	r2, [r3, #16]
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	2107      	movs	r1, #7
 8000a8a:	400b      	ands	r3, r1
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	409a      	lsls	r2, r3
 8000a90:	0013      	movs	r3, r2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	08da      	lsrs	r2, r3, #3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3208      	adds	r2, #8
 8000aa0:	0092      	lsls	r2, r2, #2
 8000aa2:	6939      	ldr	r1, [r7, #16]
 8000aa4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	409a      	lsls	r2, r3
 8000ab4:	0013      	movs	r3, r2
 8000ab6:	43da      	mvns	r2, r3
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	401a      	ands	r2, r3
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	409a      	lsls	r2, r3
 8000acc:	0013      	movs	r3, r2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	23c0      	movs	r3, #192	@ 0xc0
 8000ae0:	029b      	lsls	r3, r3, #10
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	d100      	bne.n	8000ae8 <HAL_GPIO_Init+0x174>
 8000ae6:	e09a      	b.n	8000c1e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae8:	4b54      	ldr	r3, [pc, #336]	@ (8000c3c <HAL_GPIO_Init+0x2c8>)
 8000aea:	699a      	ldr	r2, [r3, #24]
 8000aec:	4b53      	ldr	r3, [pc, #332]	@ (8000c3c <HAL_GPIO_Init+0x2c8>)
 8000aee:	2101      	movs	r1, #1
 8000af0:	430a      	orrs	r2, r1
 8000af2:	619a      	str	r2, [r3, #24]
 8000af4:	4b51      	ldr	r3, [pc, #324]	@ (8000c3c <HAL_GPIO_Init+0x2c8>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	2201      	movs	r2, #1
 8000afa:	4013      	ands	r3, r2
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b00:	4a4f      	ldr	r2, [pc, #316]	@ (8000c40 <HAL_GPIO_Init+0x2cc>)
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	089b      	lsrs	r3, r3, #2
 8000b06:	3302      	adds	r3, #2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	589b      	ldr	r3, [r3, r2]
 8000b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	2203      	movs	r2, #3
 8000b12:	4013      	ands	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	220f      	movs	r2, #15
 8000b18:	409a      	lsls	r2, r3
 8000b1a:	0013      	movs	r3, r2
 8000b1c:	43da      	mvns	r2, r3
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	2390      	movs	r3, #144	@ 0x90
 8000b28:	05db      	lsls	r3, r3, #23
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d013      	beq.n	8000b56 <HAL_GPIO_Init+0x1e2>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a44      	ldr	r2, [pc, #272]	@ (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d00d      	beq.n	8000b52 <HAL_GPIO_Init+0x1de>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a43      	ldr	r2, [pc, #268]	@ (8000c48 <HAL_GPIO_Init+0x2d4>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d007      	beq.n	8000b4e <HAL_GPIO_Init+0x1da>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a42      	ldr	r2, [pc, #264]	@ (8000c4c <HAL_GPIO_Init+0x2d8>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d101      	bne.n	8000b4a <HAL_GPIO_Init+0x1d6>
 8000b46:	2303      	movs	r3, #3
 8000b48:	e006      	b.n	8000b58 <HAL_GPIO_Init+0x1e4>
 8000b4a:	2305      	movs	r3, #5
 8000b4c:	e004      	b.n	8000b58 <HAL_GPIO_Init+0x1e4>
 8000b4e:	2302      	movs	r3, #2
 8000b50:	e002      	b.n	8000b58 <HAL_GPIO_Init+0x1e4>
 8000b52:	2301      	movs	r3, #1
 8000b54:	e000      	b.n	8000b58 <HAL_GPIO_Init+0x1e4>
 8000b56:	2300      	movs	r3, #0
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	2103      	movs	r1, #3
 8000b5c:	400a      	ands	r2, r1
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	4093      	lsls	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b68:	4935      	ldr	r1, [pc, #212]	@ (8000c40 <HAL_GPIO_Init+0x2cc>)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	089b      	lsrs	r3, r3, #2
 8000b6e:	3302      	adds	r3, #2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b76:	4b36      	ldr	r3, [pc, #216]	@ (8000c50 <HAL_GPIO_Init+0x2dc>)
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	2380      	movs	r3, #128	@ 0x80
 8000b8c:	035b      	lsls	r3, r3, #13
 8000b8e:	4013      	ands	r3, r2
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c50 <HAL_GPIO_Init+0x2dc>)
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c50 <HAL_GPIO_Init+0x2dc>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	43da      	mvns	r2, r3
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	2380      	movs	r3, #128	@ 0x80
 8000bb6:	039b      	lsls	r3, r3, #14
 8000bb8:	4013      	ands	r3, r2
 8000bba:	d003      	beq.n	8000bc4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	@ (8000c50 <HAL_GPIO_Init+0x2dc>)
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000bca:	4b21      	ldr	r3, [pc, #132]	@ (8000c50 <HAL_GPIO_Init+0x2dc>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	2380      	movs	r3, #128	@ 0x80
 8000be0:	029b      	lsls	r3, r3, #10
 8000be2:	4013      	ands	r3, r2
 8000be4:	d003      	beq.n	8000bee <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bee:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <HAL_GPIO_Init+0x2dc>)
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000bf4:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <HAL_GPIO_Init+0x2dc>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	43da      	mvns	r2, r3
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	2380      	movs	r3, #128	@ 0x80
 8000c0a:	025b      	lsls	r3, r3, #9
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	d003      	beq.n	8000c18 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c18:	4b0d      	ldr	r3, [pc, #52]	@ (8000c50 <HAL_GPIO_Init+0x2dc>)
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	3301      	adds	r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	40da      	lsrs	r2, r3
 8000c2c:	1e13      	subs	r3, r2, #0
 8000c2e:	d000      	beq.n	8000c32 <HAL_GPIO_Init+0x2be>
 8000c30:	e6a8      	b.n	8000984 <HAL_GPIO_Init+0x10>
  } 
}
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	46c0      	nop			@ (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b006      	add	sp, #24
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010000 	.word	0x40010000
 8000c44:	48000400 	.word	0x48000400
 8000c48:	48000800 	.word	0x48000800
 8000c4c:	48000c00 	.word	0x48000c00
 8000c50:	40010400 	.word	0x40010400

08000c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	0008      	movs	r0, r1
 8000c5e:	0011      	movs	r1, r2
 8000c60:	1cbb      	adds	r3, r7, #2
 8000c62:	1c02      	adds	r2, r0, #0
 8000c64:	801a      	strh	r2, [r3, #0]
 8000c66:	1c7b      	adds	r3, r7, #1
 8000c68:	1c0a      	adds	r2, r1, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c6c:	1c7b      	adds	r3, r7, #1
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d004      	beq.n	8000c7e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c74:	1cbb      	adds	r3, r7, #2
 8000c76:	881a      	ldrh	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c7c:	e003      	b.n	8000c86 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c7e:	1cbb      	adds	r3, r7, #2
 8000c80:	881a      	ldrh	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b002      	add	sp, #8
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b084      	sub	sp, #16
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	000a      	movs	r2, r1
 8000c98:	1cbb      	adds	r3, r7, #2
 8000c9a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ca2:	1cbb      	adds	r3, r7, #2
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	041a      	lsls	r2, r3, #16
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	1cb9      	adds	r1, r7, #2
 8000cb2:	8809      	ldrh	r1, [r1, #0]
 8000cb4:	400b      	ands	r3, r1
 8000cb6:	431a      	orrs	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	619a      	str	r2, [r3, #24]
}
 8000cbc:	46c0      	nop			@ (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b004      	add	sp, #16
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d101      	bne.n	8000cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e082      	b.n	8000ddc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2241      	movs	r2, #65	@ 0x41
 8000cda:	5c9b      	ldrb	r3, [r3, r2]
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d107      	bne.n	8000cf2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2240      	movs	r2, #64	@ 0x40
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	0018      	movs	r0, r3
 8000cee:	f7ff fbd1 	bl	8000494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2241      	movs	r2, #65	@ 0x41
 8000cf6:	2124      	movs	r1, #36	@ 0x24
 8000cf8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2101      	movs	r1, #1
 8000d06:	438a      	bics	r2, r1
 8000d08:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4934      	ldr	r1, [pc, #208]	@ (8000de4 <HAL_I2C_Init+0x120>)
 8000d14:	400a      	ands	r2, r1
 8000d16:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	689a      	ldr	r2, [r3, #8]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4931      	ldr	r1, [pc, #196]	@ (8000de8 <HAL_I2C_Init+0x124>)
 8000d24:	400a      	ands	r2, r1
 8000d26:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d108      	bne.n	8000d42 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2180      	movs	r1, #128	@ 0x80
 8000d3a:	0209      	lsls	r1, r1, #8
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	e007      	b.n	8000d52 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	689a      	ldr	r2, [r3, #8]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2184      	movs	r1, #132	@ 0x84
 8000d4c:	0209      	lsls	r1, r1, #8
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d104      	bne.n	8000d64 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2280      	movs	r2, #128	@ 0x80
 8000d60:	0112      	lsls	r2, r2, #4
 8000d62:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	491f      	ldr	r1, [pc, #124]	@ (8000dec <HAL_I2C_Init+0x128>)
 8000d70:	430a      	orrs	r2, r1
 8000d72:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	68da      	ldr	r2, [r3, #12]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	491a      	ldr	r1, [pc, #104]	@ (8000de8 <HAL_I2C_Init+0x124>)
 8000d80:	400a      	ands	r2, r1
 8000d82:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	691a      	ldr	r2, [r3, #16]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	69d9      	ldr	r1, [r3, #28]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a1a      	ldr	r2, [r3, #32]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	430a      	orrs	r2, r1
 8000dac:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2101      	movs	r1, #1
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2241      	movs	r2, #65	@ 0x41
 8000dc8:	2120      	movs	r1, #32
 8000dca:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2242      	movs	r2, #66	@ 0x42
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	0018      	movs	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b002      	add	sp, #8
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	f0ffffff 	.word	0xf0ffffff
 8000de8:	ffff7fff 	.word	0xffff7fff
 8000dec:	02008000 	.word	0x02008000

08000df0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000df0:	b590      	push	{r4, r7, lr}
 8000df2:	b089      	sub	sp, #36	@ 0x24
 8000df4:	af02      	add	r7, sp, #8
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	0008      	movs	r0, r1
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	230a      	movs	r3, #10
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	1c02      	adds	r2, r0, #0
 8000e04:	801a      	strh	r2, [r3, #0]
 8000e06:	2308      	movs	r3, #8
 8000e08:	18fb      	adds	r3, r7, r3
 8000e0a:	1c0a      	adds	r2, r1, #0
 8000e0c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	2241      	movs	r2, #65	@ 0x41
 8000e12:	5c9b      	ldrb	r3, [r3, r2]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b20      	cmp	r3, #32
 8000e18:	d000      	beq.n	8000e1c <HAL_I2C_Master_Transmit+0x2c>
 8000e1a:	e0e7      	b.n	8000fec <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2240      	movs	r2, #64	@ 0x40
 8000e20:	5c9b      	ldrb	r3, [r3, r2]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d101      	bne.n	8000e2a <HAL_I2C_Master_Transmit+0x3a>
 8000e26:	2302      	movs	r3, #2
 8000e28:	e0e1      	b.n	8000fee <HAL_I2C_Master_Transmit+0x1fe>
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2240      	movs	r2, #64	@ 0x40
 8000e2e:	2101      	movs	r1, #1
 8000e30:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000e32:	f7ff fc41 	bl	80006b8 <HAL_GetTick>
 8000e36:	0003      	movs	r3, r0
 8000e38:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e3a:	2380      	movs	r3, #128	@ 0x80
 8000e3c:	0219      	lsls	r1, r3, #8
 8000e3e:	68f8      	ldr	r0, [r7, #12]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	2319      	movs	r3, #25
 8000e46:	2201      	movs	r2, #1
 8000e48:	f000 fe72 	bl	8001b30 <I2C_WaitOnFlagUntilTimeout>
 8000e4c:	1e03      	subs	r3, r0, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e0cc      	b.n	8000fee <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2241      	movs	r2, #65	@ 0x41
 8000e58:	2121      	movs	r1, #33	@ 0x21
 8000e5a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2242      	movs	r2, #66	@ 0x42
 8000e60:	2110      	movs	r1, #16
 8000e62:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2200      	movs	r2, #0
 8000e68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2208      	movs	r2, #8
 8000e74:	18ba      	adds	r2, r7, r2
 8000e76:	8812      	ldrh	r2, [r2, #0]
 8000e78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	2bff      	cmp	r3, #255	@ 0xff
 8000e88:	d911      	bls.n	8000eae <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	22ff      	movs	r2, #255	@ 0xff
 8000e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	2380      	movs	r3, #128	@ 0x80
 8000e98:	045c      	lsls	r4, r3, #17
 8000e9a:	230a      	movs	r3, #10
 8000e9c:	18fb      	adds	r3, r7, r3
 8000e9e:	8819      	ldrh	r1, [r3, #0]
 8000ea0:	68f8      	ldr	r0, [r7, #12]
 8000ea2:	4b55      	ldr	r3, [pc, #340]	@ (8000ff8 <HAL_I2C_Master_Transmit+0x208>)
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	0023      	movs	r3, r4
 8000ea8:	f001 f812 	bl	8001ed0 <I2C_TransferConfig>
 8000eac:	e075      	b.n	8000f9a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	2380      	movs	r3, #128	@ 0x80
 8000ec0:	049c      	lsls	r4, r3, #18
 8000ec2:	230a      	movs	r3, #10
 8000ec4:	18fb      	adds	r3, r7, r3
 8000ec6:	8819      	ldrh	r1, [r3, #0]
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	4b4b      	ldr	r3, [pc, #300]	@ (8000ff8 <HAL_I2C_Master_Transmit+0x208>)
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	0023      	movs	r3, r4
 8000ed0:	f000 fffe 	bl	8001ed0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000ed4:	e061      	b.n	8000f9a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	0018      	movs	r0, r3
 8000ede:	f000 fe75 	bl	8001bcc <I2C_WaitOnTXISFlagUntilTimeout>
 8000ee2:	1e03      	subs	r3, r0, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e081      	b.n	8000fee <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eee:	781a      	ldrb	r2, [r3, #0]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	3b01      	subs	r3, #1
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f12:	3b01      	subs	r3, #1
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d03a      	beq.n	8000f9a <HAL_I2C_Master_Transmit+0x1aa>
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d136      	bne.n	8000f9a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f2e:	68f8      	ldr	r0, [r7, #12]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	0013      	movs	r3, r2
 8000f36:	2200      	movs	r2, #0
 8000f38:	2180      	movs	r1, #128	@ 0x80
 8000f3a:	f000 fdf9 	bl	8001b30 <I2C_WaitOnFlagUntilTimeout>
 8000f3e:	1e03      	subs	r3, r0, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e053      	b.n	8000fee <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	2bff      	cmp	r3, #255	@ 0xff
 8000f4e:	d911      	bls.n	8000f74 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	22ff      	movs	r2, #255	@ 0xff
 8000f54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	2380      	movs	r3, #128	@ 0x80
 8000f5e:	045c      	lsls	r4, r3, #17
 8000f60:	230a      	movs	r3, #10
 8000f62:	18fb      	adds	r3, r7, r3
 8000f64:	8819      	ldrh	r1, [r3, #0]
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	2300      	movs	r3, #0
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	0023      	movs	r3, r4
 8000f6e:	f000 ffaf 	bl	8001ed0 <I2C_TransferConfig>
 8000f72:	e012      	b.n	8000f9a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	2380      	movs	r3, #128	@ 0x80
 8000f86:	049c      	lsls	r4, r3, #18
 8000f88:	230a      	movs	r3, #10
 8000f8a:	18fb      	adds	r3, r7, r3
 8000f8c:	8819      	ldrh	r1, [r3, #0]
 8000f8e:	68f8      	ldr	r0, [r7, #12]
 8000f90:	2300      	movs	r3, #0
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	0023      	movs	r3, r4
 8000f96:	f000 ff9b 	bl	8001ed0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d198      	bne.n	8000ed6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	0018      	movs	r0, r3
 8000fac:	f000 fe54 	bl	8001c58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000fb0:	1e03      	subs	r3, r0, #0
 8000fb2:	d001      	beq.n	8000fb8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e01a      	b.n	8000fee <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2220      	movs	r2, #32
 8000fbe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	490c      	ldr	r1, [pc, #48]	@ (8000ffc <HAL_I2C_Master_Transmit+0x20c>)
 8000fcc:	400a      	ands	r2, r1
 8000fce:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2241      	movs	r2, #65	@ 0x41
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2242      	movs	r2, #66	@ 0x42
 8000fdc:	2100      	movs	r1, #0
 8000fde:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2240      	movs	r2, #64	@ 0x40
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e000      	b.n	8000fee <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8000fec:	2302      	movs	r3, #2
  }
}
 8000fee:	0018      	movs	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b007      	add	sp, #28
 8000ff4:	bd90      	pop	{r4, r7, pc}
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	80002000 	.word	0x80002000
 8000ffc:	fe00e800 	.word	0xfe00e800

08001000 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800101c:	2b00      	cmp	r3, #0
 800101e:	d005      	beq.n	800102c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	68f9      	ldr	r1, [r7, #12]
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	4798      	blx	r3
  }
}
 800102c:	46c0      	nop			@ (mov r8, r8)
 800102e:	46bd      	mov	sp, r7
 8001030:	b004      	add	sp, #16
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	2380      	movs	r3, #128	@ 0x80
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4013      	ands	r3, r2
 8001054:	d00e      	beq.n	8001074 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	2280      	movs	r2, #128	@ 0x80
 800105a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800105c:	d00a      	beq.n	8001074 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	2201      	movs	r2, #1
 8001064:	431a      	orrs	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2280      	movs	r2, #128	@ 0x80
 8001070:	0052      	lsls	r2, r2, #1
 8001072:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	2380      	movs	r3, #128	@ 0x80
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	4013      	ands	r3, r2
 800107c:	d00e      	beq.n	800109c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	2280      	movs	r2, #128	@ 0x80
 8001082:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001084:	d00a      	beq.n	800109c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108a:	2208      	movs	r2, #8
 800108c:	431a      	orrs	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2280      	movs	r2, #128	@ 0x80
 8001098:	00d2      	lsls	r2, r2, #3
 800109a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	2380      	movs	r3, #128	@ 0x80
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4013      	ands	r3, r2
 80010a4:	d00e      	beq.n	80010c4 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	2280      	movs	r2, #128	@ 0x80
 80010aa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80010ac:	d00a      	beq.n	80010c4 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b2:	2202      	movs	r2, #2
 80010b4:	431a      	orrs	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2280      	movs	r2, #128	@ 0x80
 80010c0:	0092      	lsls	r2, r2, #2
 80010c2:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c8:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	220b      	movs	r2, #11
 80010ce:	4013      	ands	r3, r2
 80010d0:	d005      	beq.n	80010de <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	0011      	movs	r1, r2
 80010d8:	0018      	movs	r0, r3
 80010da:	f000 fbbd 	bl	8001858 <I2C_ITError>
  }
}
 80010de:	46c0      	nop			@ (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b006      	add	sp, #24
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80010ee:	46c0      	nop			@ (mov r8, r8)
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b002      	add	sp, #8
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	46bd      	mov	sp, r7
 8001102:	b002      	add	sp, #8
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	0008      	movs	r0, r1
 8001110:	0011      	movs	r1, r2
 8001112:	1cfb      	adds	r3, r7, #3
 8001114:	1c02      	adds	r2, r0, #0
 8001116:	701a      	strb	r2, [r3, #0]
 8001118:	003b      	movs	r3, r7
 800111a:	1c0a      	adds	r2, r1, #0
 800111c:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800111e:	46c0      	nop			@ (mov r8, r8)
 8001120:	46bd      	mov	sp, r7
 8001122:	b002      	add	sp, #8
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b002      	add	sp, #8
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	b002      	add	sp, #8
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	b002      	add	sp, #8
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001168:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2240      	movs	r2, #64	@ 0x40
 8001172:	5c9b      	ldrb	r3, [r3, r2]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d101      	bne.n	800117c <I2C_Slave_ISR_IT+0x24>
 8001178:	2302      	movs	r3, #2
 800117a:	e0e6      	b.n	800134a <I2C_Slave_ISR_IT+0x1f2>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2240      	movs	r2, #64	@ 0x40
 8001180:	2101      	movs	r1, #1
 8001182:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	2220      	movs	r2, #32
 8001188:	4013      	ands	r3, r2
 800118a:	d009      	beq.n	80011a0 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2220      	movs	r2, #32
 8001190:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001192:	d005      	beq.n	80011a0 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	0011      	movs	r1, r2
 800119a:	0018      	movs	r0, r3
 800119c:	f000 f9e4 	bl	8001568 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	2210      	movs	r2, #16
 80011a4:	4013      	ands	r3, r2
 80011a6:	d052      	beq.n	800124e <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2210      	movs	r2, #16
 80011ac:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80011ae:	d04e      	beq.n	800124e <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d12d      	bne.n	8001216 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2241      	movs	r2, #65	@ 0x41
 80011be:	5c9b      	ldrb	r3, [r3, r2]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b28      	cmp	r3, #40	@ 0x28
 80011c4:	d10b      	bne.n	80011de <I2C_Slave_ISR_IT+0x86>
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	2380      	movs	r3, #128	@ 0x80
 80011ca:	049b      	lsls	r3, r3, #18
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d106      	bne.n	80011de <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	0011      	movs	r1, r2
 80011d6:	0018      	movs	r0, r3
 80011d8:	f000 fae6 	bl	80017a8 <I2C_ITListenCplt>
 80011dc:	e036      	b.n	800124c <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2241      	movs	r2, #65	@ 0x41
 80011e2:	5c9b      	ldrb	r3, [r3, r2]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b29      	cmp	r3, #41	@ 0x29
 80011e8:	d110      	bne.n	800120c <I2C_Slave_ISR_IT+0xb4>
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	4a59      	ldr	r2, [pc, #356]	@ (8001354 <I2C_Slave_ISR_IT+0x1fc>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d00c      	beq.n	800120c <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2210      	movs	r2, #16
 80011f8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	0018      	movs	r0, r3
 80011fe:	f000 fc56 	bl	8001aae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	0018      	movs	r0, r3
 8001206:	f000 f94b 	bl	80014a0 <I2C_ITSlaveSeqCplt>
 800120a:	e01f      	b.n	800124c <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2210      	movs	r2, #16
 8001212:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001214:	e091      	b.n	800133a <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2210      	movs	r2, #16
 800121c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	2204      	movs	r2, #4
 8001224:	431a      	orrs	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <I2C_Slave_ISR_IT+0xe4>
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	2380      	movs	r3, #128	@ 0x80
 8001234:	045b      	lsls	r3, r3, #17
 8001236:	429a      	cmp	r2, r3
 8001238:	d000      	beq.n	800123c <I2C_Slave_ISR_IT+0xe4>
 800123a:	e07e      	b.n	800133a <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	0011      	movs	r1, r2
 8001244:	0018      	movs	r0, r3
 8001246:	f000 fb07 	bl	8001858 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800124a:	e076      	b.n	800133a <I2C_Slave_ISR_IT+0x1e2>
 800124c:	e075      	b.n	800133a <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	2204      	movs	r2, #4
 8001252:	4013      	ands	r3, r2
 8001254:	d02f      	beq.n	80012b6 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2204      	movs	r2, #4
 800125a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800125c:	d02b      	beq.n	80012b6 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001262:	b29b      	uxth	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d018      	beq.n	800129a <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001284:	3b01      	subs	r3, #1
 8001286:	b29a      	uxth	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001290:	b29b      	uxth	r3, r3
 8001292:	3b01      	subs	r3, #1
 8001294:	b29a      	uxth	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800129e:	b29b      	uxth	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d14c      	bne.n	800133e <I2C_Slave_ISR_IT+0x1e6>
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	4a2b      	ldr	r2, [pc, #172]	@ (8001354 <I2C_Slave_ISR_IT+0x1fc>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d048      	beq.n	800133e <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	0018      	movs	r0, r3
 80012b0:	f000 f8f6 	bl	80014a0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80012b4:	e043      	b.n	800133e <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	2208      	movs	r2, #8
 80012ba:	4013      	ands	r3, r2
 80012bc:	d00a      	beq.n	80012d4 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2208      	movs	r2, #8
 80012c2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80012c4:	d006      	beq.n	80012d4 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	0011      	movs	r1, r2
 80012cc:	0018      	movs	r0, r3
 80012ce:	f000 f843 	bl	8001358 <I2C_ITAddrCplt>
 80012d2:	e035      	b.n	8001340 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	2202      	movs	r2, #2
 80012d8:	4013      	ands	r3, r2
 80012da:	d031      	beq.n	8001340 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2202      	movs	r2, #2
 80012e0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80012e2:	d02d      	beq.n	8001340 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d018      	beq.n	8001320 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f2:	781a      	ldrb	r2, [r3, #0]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001308:	b29b      	uxth	r3, r3
 800130a:	3b01      	subs	r3, #1
 800130c:	b29a      	uxth	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001316:	3b01      	subs	r3, #1
 8001318:	b29a      	uxth	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800131e:	e00f      	b.n	8001340 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	2380      	movs	r3, #128	@ 0x80
 8001324:	045b      	lsls	r3, r3, #17
 8001326:	429a      	cmp	r2, r3
 8001328:	d002      	beq.n	8001330 <I2C_Slave_ISR_IT+0x1d8>
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d107      	bne.n	8001340 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	0018      	movs	r0, r3
 8001334:	f000 f8b4 	bl	80014a0 <I2C_ITSlaveSeqCplt>
 8001338:	e002      	b.n	8001340 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800133a:	46c0      	nop			@ (mov r8, r8)
 800133c:	e000      	b.n	8001340 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800133e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2240      	movs	r2, #64	@ 0x40
 8001344:	2100      	movs	r1, #0
 8001346:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	0018      	movs	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	b006      	add	sp, #24
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	ffff0000 	.word	0xffff0000

08001358 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2241      	movs	r2, #65	@ 0x41
 8001366:	5c9b      	ldrb	r3, [r3, r2]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	001a      	movs	r2, r3
 800136c:	2328      	movs	r3, #40	@ 0x28
 800136e:	4013      	ands	r3, r2
 8001370:	2b28      	cmp	r3, #40	@ 0x28
 8001372:	d000      	beq.n	8001376 <I2C_ITAddrCplt+0x1e>
 8001374:	e088      	b.n	8001488 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	0c1b      	lsrs	r3, r3, #16
 800137e:	b2da      	uxtb	r2, r3
 8001380:	250f      	movs	r5, #15
 8001382:	197b      	adds	r3, r7, r5
 8001384:	2101      	movs	r1, #1
 8001386:	400a      	ands	r2, r1
 8001388:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	0c1b      	lsrs	r3, r3, #16
 8001392:	b29a      	uxth	r2, r3
 8001394:	200c      	movs	r0, #12
 8001396:	183b      	adds	r3, r7, r0
 8001398:	21fe      	movs	r1, #254	@ 0xfe
 800139a:	400a      	ands	r2, r1
 800139c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	240a      	movs	r4, #10
 80013a8:	193b      	adds	r3, r7, r4
 80013aa:	0592      	lsls	r2, r2, #22
 80013ac:	0d92      	lsrs	r2, r2, #22
 80013ae:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	2308      	movs	r3, #8
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	21fe      	movs	r1, #254	@ 0xfe
 80013be:	400a      	ands	r2, r1
 80013c0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d148      	bne.n	800145c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80013ca:	0021      	movs	r1, r4
 80013cc:	187b      	adds	r3, r7, r1
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	09db      	lsrs	r3, r3, #7
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	183b      	adds	r3, r7, r0
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	4053      	eors	r3, r2
 80013da:	b29b      	uxth	r3, r3
 80013dc:	001a      	movs	r2, r3
 80013de:	2306      	movs	r3, #6
 80013e0:	4013      	ands	r3, r2
 80013e2:	d120      	bne.n	8001426 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80013e4:	183b      	adds	r3, r7, r0
 80013e6:	187a      	adds	r2, r7, r1
 80013e8:	8812      	ldrh	r2, [r2, #0]
 80013ea:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d14c      	bne.n	8001498 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2208      	movs	r2, #8
 800140a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2240      	movs	r2, #64	@ 0x40
 8001410:	2100      	movs	r1, #0
 8001412:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001414:	183b      	adds	r3, r7, r0
 8001416:	881a      	ldrh	r2, [r3, #0]
 8001418:	197b      	adds	r3, r7, r5
 800141a:	7819      	ldrb	r1, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	0018      	movs	r0, r3
 8001420:	f7ff fe71 	bl	8001106 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001424:	e038      	b.n	8001498 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8001426:	240c      	movs	r4, #12
 8001428:	193b      	adds	r3, r7, r4
 800142a:	2208      	movs	r2, #8
 800142c:	18ba      	adds	r2, r7, r2
 800142e:	8812      	ldrh	r2, [r2, #0]
 8001430:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001432:	2380      	movs	r3, #128	@ 0x80
 8001434:	021a      	lsls	r2, r3, #8
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	0011      	movs	r1, r2
 800143a:	0018      	movs	r0, r3
 800143c:	f000 fd82 	bl	8001f44 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2240      	movs	r2, #64	@ 0x40
 8001444:	2100      	movs	r1, #0
 8001446:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001448:	193b      	adds	r3, r7, r4
 800144a:	881a      	ldrh	r2, [r3, #0]
 800144c:	230f      	movs	r3, #15
 800144e:	18fb      	adds	r3, r7, r3
 8001450:	7819      	ldrb	r1, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	0018      	movs	r0, r3
 8001456:	f7ff fe56 	bl	8001106 <HAL_I2C_AddrCallback>
}
 800145a:	e01d      	b.n	8001498 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800145c:	2380      	movs	r3, #128	@ 0x80
 800145e:	021a      	lsls	r2, r3, #8
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	0011      	movs	r1, r2
 8001464:	0018      	movs	r0, r3
 8001466:	f000 fd6d 	bl	8001f44 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2240      	movs	r2, #64	@ 0x40
 800146e:	2100      	movs	r1, #0
 8001470:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001472:	230c      	movs	r3, #12
 8001474:	18fb      	adds	r3, r7, r3
 8001476:	881a      	ldrh	r2, [r3, #0]
 8001478:	230f      	movs	r3, #15
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	7819      	ldrb	r1, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	0018      	movs	r0, r3
 8001482:	f7ff fe40 	bl	8001106 <HAL_I2C_AddrCallback>
}
 8001486:	e007      	b.n	8001498 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2208      	movs	r2, #8
 800148e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2240      	movs	r2, #64	@ 0x40
 8001494:	2100      	movs	r1, #0
 8001496:	5499      	strb	r1, [r3, r2]
}
 8001498:	46c0      	nop			@ (mov r8, r8)
 800149a:	46bd      	mov	sp, r7
 800149c:	b004      	add	sp, #16
 800149e:	bdb0      	pop	{r4, r5, r7, pc}

080014a0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2242      	movs	r2, #66	@ 0x42
 80014b4:	2100      	movs	r1, #0
 80014b6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	2380      	movs	r3, #128	@ 0x80
 80014bc:	01db      	lsls	r3, r3, #7
 80014be:	4013      	ands	r3, r2
 80014c0:	d008      	beq.n	80014d4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4924      	ldr	r1, [pc, #144]	@ (8001560 <I2C_ITSlaveSeqCplt+0xc0>)
 80014ce:	400a      	ands	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	e00c      	b.n	80014ee <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	2380      	movs	r3, #128	@ 0x80
 80014d8:	021b      	lsls	r3, r3, #8
 80014da:	4013      	ands	r3, r2
 80014dc:	d007      	beq.n	80014ee <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	491e      	ldr	r1, [pc, #120]	@ (8001564 <I2C_ITSlaveSeqCplt+0xc4>)
 80014ea:	400a      	ands	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2241      	movs	r2, #65	@ 0x41
 80014f2:	5c9b      	ldrb	r3, [r3, r2]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b29      	cmp	r3, #41	@ 0x29
 80014f8:	d114      	bne.n	8001524 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2241      	movs	r2, #65	@ 0x41
 80014fe:	2128      	movs	r1, #40	@ 0x28
 8001500:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2221      	movs	r2, #33	@ 0x21
 8001506:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2101      	movs	r1, #1
 800150c:	0018      	movs	r0, r3
 800150e:	f000 fd19 	bl	8001f44 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2240      	movs	r2, #64	@ 0x40
 8001516:	2100      	movs	r1, #0
 8001518:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	0018      	movs	r0, r3
 800151e:	f7ff fde2 	bl	80010e6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001522:	e019      	b.n	8001558 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2241      	movs	r2, #65	@ 0x41
 8001528:	5c9b      	ldrb	r3, [r3, r2]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b2a      	cmp	r3, #42	@ 0x2a
 800152e:	d113      	bne.n	8001558 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2241      	movs	r2, #65	@ 0x41
 8001534:	2128      	movs	r1, #40	@ 0x28
 8001536:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2222      	movs	r2, #34	@ 0x22
 800153c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2102      	movs	r1, #2
 8001542:	0018      	movs	r0, r3
 8001544:	f000 fcfe 	bl	8001f44 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2240      	movs	r2, #64	@ 0x40
 800154c:	2100      	movs	r1, #0
 800154e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	0018      	movs	r0, r3
 8001554:	f7ff fdcf 	bl	80010f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8001558:	46c0      	nop			@ (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	b004      	add	sp, #16
 800155e:	bd80      	pop	{r7, pc}
 8001560:	ffffbfff 	.word	0xffffbfff
 8001564:	ffff7fff 	.word	0xffff7fff

08001568 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800157e:	200f      	movs	r0, #15
 8001580:	183b      	adds	r3, r7, r0
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	2141      	movs	r1, #65	@ 0x41
 8001586:	5c52      	ldrb	r2, [r2, r1]
 8001588:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2220      	movs	r2, #32
 8001590:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001592:	183b      	adds	r3, r7, r0
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b21      	cmp	r3, #33	@ 0x21
 8001598:	d003      	beq.n	80015a2 <I2C_ITSlaveCplt+0x3a>
 800159a:	183b      	adds	r3, r7, r0
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b29      	cmp	r3, #41	@ 0x29
 80015a0:	d109      	bne.n	80015b6 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80015a2:	4a7b      	ldr	r2, [pc, #492]	@ (8001790 <I2C_ITSlaveCplt+0x228>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	0011      	movs	r1, r2
 80015a8:	0018      	movs	r0, r3
 80015aa:	f000 fccb 	bl	8001f44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2221      	movs	r2, #33	@ 0x21
 80015b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80015b4:	e011      	b.n	80015da <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80015b6:	220f      	movs	r2, #15
 80015b8:	18bb      	adds	r3, r7, r2
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b22      	cmp	r3, #34	@ 0x22
 80015be:	d003      	beq.n	80015c8 <I2C_ITSlaveCplt+0x60>
 80015c0:	18bb      	adds	r3, r7, r2
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80015c6:	d108      	bne.n	80015da <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80015c8:	4a72      	ldr	r2, [pc, #456]	@ (8001794 <I2C_ITSlaveCplt+0x22c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	0011      	movs	r1, r2
 80015ce:	0018      	movs	r0, r3
 80015d0:	f000 fcb8 	bl	8001f44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2222      	movs	r2, #34	@ 0x22
 80015d8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2180      	movs	r1, #128	@ 0x80
 80015e6:	0209      	lsls	r1, r1, #8
 80015e8:	430a      	orrs	r2, r1
 80015ea:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4968      	ldr	r1, [pc, #416]	@ (8001798 <I2C_ITSlaveCplt+0x230>)
 80015f8:	400a      	ands	r2, r1
 80015fa:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	0018      	movs	r0, r3
 8001600:	f000 fa55 	bl	8001aae <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	2380      	movs	r3, #128	@ 0x80
 8001608:	01db      	lsls	r3, r3, #7
 800160a:	4013      	ands	r3, r2
 800160c:	d013      	beq.n	8001636 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4960      	ldr	r1, [pc, #384]	@ (800179c <I2C_ITSlaveCplt+0x234>)
 800161a:	400a      	ands	r2, r1
 800161c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001622:	2b00      	cmp	r3, #0
 8001624:	d01f      	beq.n	8001666 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	b29a      	uxth	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001634:	e017      	b.n	8001666 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	2380      	movs	r3, #128	@ 0x80
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	4013      	ands	r3, r2
 800163e:	d012      	beq.n	8001666 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4955      	ldr	r1, [pc, #340]	@ (80017a0 <I2C_ITSlaveCplt+0x238>)
 800164c:	400a      	ands	r2, r1
 800164e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001654:	2b00      	cmp	r3, #0
 8001656:	d006      	beq.n	8001666 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	b29a      	uxth	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	2204      	movs	r2, #4
 800166a:	4013      	ands	r3, r2
 800166c:	d020      	beq.n	80016b0 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2204      	movs	r2, #4
 8001672:	4393      	bics	r3, r2
 8001674:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00c      	beq.n	80016b0 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800169a:	3b01      	subs	r3, #1
 800169c:	b29a      	uxth	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	3b01      	subs	r3, #1
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d005      	beq.n	80016c6 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016be:	2204      	movs	r2, #4
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2242      	movs	r2, #66	@ 0x42
 80016ca:	2100      	movs	r1, #0
 80016cc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d013      	beq.n	8001704 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	0011      	movs	r1, r2
 80016e4:	0018      	movs	r0, r3
 80016e6:	f000 f8b7 	bl	8001858 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2241      	movs	r2, #65	@ 0x41
 80016ee:	5c9b      	ldrb	r3, [r3, r2]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b28      	cmp	r3, #40	@ 0x28
 80016f4:	d147      	bne.n	8001786 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	0011      	movs	r1, r2
 80016fc:	0018      	movs	r0, r3
 80016fe:	f000 f853 	bl	80017a8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001702:	e040      	b.n	8001786 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001708:	4a26      	ldr	r2, [pc, #152]	@ (80017a4 <I2C_ITSlaveCplt+0x23c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d016      	beq.n	800173c <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	0018      	movs	r0, r3
 8001712:	f7ff fec5 	bl	80014a0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a22      	ldr	r2, [pc, #136]	@ (80017a4 <I2C_ITSlaveCplt+0x23c>)
 800171a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2241      	movs	r2, #65	@ 0x41
 8001720:	2120      	movs	r1, #32
 8001722:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2240      	movs	r2, #64	@ 0x40
 800172e:	2100      	movs	r1, #0
 8001730:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	0018      	movs	r0, r3
 8001736:	f7ff fcf6 	bl	8001126 <HAL_I2C_ListenCpltCallback>
}
 800173a:	e024      	b.n	8001786 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2241      	movs	r2, #65	@ 0x41
 8001740:	5c9b      	ldrb	r3, [r3, r2]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b22      	cmp	r3, #34	@ 0x22
 8001746:	d10f      	bne.n	8001768 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2241      	movs	r2, #65	@ 0x41
 800174c:	2120      	movs	r1, #32
 800174e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2240      	movs	r2, #64	@ 0x40
 800175a:	2100      	movs	r1, #0
 800175c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff fcc8 	bl	80010f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8001766:	e00e      	b.n	8001786 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2241      	movs	r2, #65	@ 0x41
 800176c:	2120      	movs	r1, #32
 800176e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2240      	movs	r2, #64	@ 0x40
 800177a:	2100      	movs	r1, #0
 800177c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	0018      	movs	r0, r3
 8001782:	f7ff fcb0 	bl	80010e6 <HAL_I2C_SlaveTxCpltCallback>
}
 8001786:	46c0      	nop			@ (mov r8, r8)
 8001788:	46bd      	mov	sp, r7
 800178a:	b006      	add	sp, #24
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			@ (mov r8, r8)
 8001790:	00008001 	.word	0x00008001
 8001794:	00008002 	.word	0x00008002
 8001798:	fe00e800 	.word	0xfe00e800
 800179c:	ffffbfff 	.word	0xffffbfff
 80017a0:	ffff7fff 	.word	0xffff7fff
 80017a4:	ffff0000 	.word	0xffff0000

080017a8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a26      	ldr	r2, [pc, #152]	@ (8001850 <I2C_ITListenCplt+0xa8>)
 80017b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2241      	movs	r2, #65	@ 0x41
 80017c2:	2120      	movs	r1, #32
 80017c4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2242      	movs	r2, #66	@ 0x42
 80017ca:	2100      	movs	r1, #0
 80017cc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	2204      	movs	r2, #4
 80017d8:	4013      	ands	r3, r2
 80017da:	d022      	beq.n	8001822 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d012      	beq.n	8001822 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001800:	3b01      	subs	r3, #1
 8001802:	b29a      	uxth	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800180c:	b29b      	uxth	r3, r3
 800180e:	3b01      	subs	r3, #1
 8001810:	b29a      	uxth	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181a:	2204      	movs	r2, #4
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001822:	4a0c      	ldr	r2, [pc, #48]	@ (8001854 <I2C_ITListenCplt+0xac>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	0011      	movs	r1, r2
 8001828:	0018      	movs	r0, r3
 800182a:	f000 fb8b 	bl	8001f44 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2210      	movs	r2, #16
 8001834:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2240      	movs	r2, #64	@ 0x40
 800183a:	2100      	movs	r1, #0
 800183c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	0018      	movs	r0, r3
 8001842:	f7ff fc70 	bl	8001126 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001846:	46c0      	nop			@ (mov r8, r8)
 8001848:	46bd      	mov	sp, r7
 800184a:	b002      	add	sp, #8
 800184c:	bd80      	pop	{r7, pc}
 800184e:	46c0      	nop			@ (mov r8, r8)
 8001850:	ffff0000 	.word	0xffff0000
 8001854:	00008003 	.word	0x00008003

08001858 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001862:	200f      	movs	r0, #15
 8001864:	183b      	adds	r3, r7, r0
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	2141      	movs	r1, #65	@ 0x41
 800186a:	5c52      	ldrb	r2, [r2, r1]
 800186c:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2242      	movs	r2, #66	@ 0x42
 8001872:	2100      	movs	r1, #0
 8001874:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a72      	ldr	r2, [pc, #456]	@ (8001a44 <I2C_ITError+0x1ec>)
 800187a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800188e:	183b      	adds	r3, r7, r0
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b28      	cmp	r3, #40	@ 0x28
 8001894:	d007      	beq.n	80018a6 <I2C_ITError+0x4e>
 8001896:	183b      	adds	r3, r7, r0
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b29      	cmp	r3, #41	@ 0x29
 800189c:	d003      	beq.n	80018a6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800189e:	183b      	adds	r3, r7, r0
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80018a4:	d10c      	bne.n	80018c0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2103      	movs	r1, #3
 80018aa:	0018      	movs	r0, r3
 80018ac:	f000 fb4a 	bl	8001f44 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2241      	movs	r2, #65	@ 0x41
 80018b4:	2128      	movs	r1, #40	@ 0x28
 80018b6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a63      	ldr	r2, [pc, #396]	@ (8001a48 <I2C_ITError+0x1f0>)
 80018bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80018be:	e032      	b.n	8001926 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80018c0:	4a62      	ldr	r2, [pc, #392]	@ (8001a4c <I2C_ITError+0x1f4>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	0011      	movs	r1, r2
 80018c6:	0018      	movs	r0, r3
 80018c8:	f000 fb3c 	bl	8001f44 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	0018      	movs	r0, r3
 80018d0:	f000 f8ed 	bl	8001aae <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2241      	movs	r2, #65	@ 0x41
 80018d8:	5c9b      	ldrb	r3, [r3, r2]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b60      	cmp	r3, #96	@ 0x60
 80018de:	d01f      	beq.n	8001920 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2241      	movs	r2, #65	@ 0x41
 80018e4:	2120      	movs	r1, #32
 80018e6:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	2220      	movs	r2, #32
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b20      	cmp	r3, #32
 80018f4:	d114      	bne.n	8001920 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	2210      	movs	r2, #16
 80018fe:	4013      	ands	r3, r2
 8001900:	2b10      	cmp	r3, #16
 8001902:	d109      	bne.n	8001918 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2210      	movs	r2, #16
 800190a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001910:	2204      	movs	r2, #4
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2220      	movs	r2, #32
 800191e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001930:	2b00      	cmp	r3, #0
 8001932:	d03b      	beq.n	80019ac <I2C_ITError+0x154>
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b11      	cmp	r3, #17
 8001938:	d002      	beq.n	8001940 <I2C_ITError+0xe8>
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	2b21      	cmp	r3, #33	@ 0x21
 800193e:	d135      	bne.n	80019ac <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	2380      	movs	r3, #128	@ 0x80
 8001948:	01db      	lsls	r3, r3, #7
 800194a:	401a      	ands	r2, r3
 800194c:	2380      	movs	r3, #128	@ 0x80
 800194e:	01db      	lsls	r3, r3, #7
 8001950:	429a      	cmp	r2, r3
 8001952:	d107      	bne.n	8001964 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	493c      	ldr	r1, [pc, #240]	@ (8001a50 <I2C_ITError+0x1f8>)
 8001960:	400a      	ands	r2, r1
 8001962:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001968:	0018      	movs	r0, r3
 800196a:	f7fe fff6 	bl	800095a <HAL_DMA_GetState>
 800196e:	0003      	movs	r3, r0
 8001970:	2b01      	cmp	r3, #1
 8001972:	d016      	beq.n	80019a2 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001978:	4a36      	ldr	r2, [pc, #216]	@ (8001a54 <I2C_ITError+0x1fc>)
 800197a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2240      	movs	r2, #64	@ 0x40
 8001980:	2100      	movs	r1, #0
 8001982:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001988:	0018      	movs	r0, r3
 800198a:	f7fe ffa1 	bl	80008d0 <HAL_DMA_Abort_IT>
 800198e:	1e03      	subs	r3, r0, #0
 8001990:	d051      	beq.n	8001a36 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001996:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800199c:	0018      	movs	r0, r3
 800199e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80019a0:	e049      	b.n	8001a36 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	0018      	movs	r0, r3
 80019a6:	f000 f859 	bl	8001a5c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80019aa:	e044      	b.n	8001a36 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d03b      	beq.n	8001a2c <I2C_ITError+0x1d4>
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2b12      	cmp	r3, #18
 80019b8:	d002      	beq.n	80019c0 <I2C_ITError+0x168>
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b22      	cmp	r3, #34	@ 0x22
 80019be:	d135      	bne.n	8001a2c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	2380      	movs	r3, #128	@ 0x80
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	401a      	ands	r2, r3
 80019cc:	2380      	movs	r3, #128	@ 0x80
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d107      	bne.n	80019e4 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	491e      	ldr	r1, [pc, #120]	@ (8001a58 <I2C_ITError+0x200>)
 80019e0:	400a      	ands	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e8:	0018      	movs	r0, r3
 80019ea:	f7fe ffb6 	bl	800095a <HAL_DMA_GetState>
 80019ee:	0003      	movs	r3, r0
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d016      	beq.n	8001a22 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019f8:	4a16      	ldr	r2, [pc, #88]	@ (8001a54 <I2C_ITError+0x1fc>)
 80019fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2240      	movs	r2, #64	@ 0x40
 8001a00:	2100      	movs	r1, #0
 8001a02:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7fe ff61 	bl	80008d0 <HAL_DMA_Abort_IT>
 8001a0e:	1e03      	subs	r3, r0, #0
 8001a10:	d013      	beq.n	8001a3a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001a20:	e00b      	b.n	8001a3a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	0018      	movs	r0, r3
 8001a26:	f000 f819 	bl	8001a5c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001a2a:	e006      	b.n	8001a3a <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f000 f814 	bl	8001a5c <I2C_TreatErrorCallback>
  }
}
 8001a34:	e002      	b.n	8001a3c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001a36:	46c0      	nop			@ (mov r8, r8)
 8001a38:	e000      	b.n	8001a3c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001a3a:	46c0      	nop			@ (mov r8, r8)
}
 8001a3c:	46c0      	nop			@ (mov r8, r8)
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b004      	add	sp, #16
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	ffff0000 	.word	0xffff0000
 8001a48:	08001159 	.word	0x08001159
 8001a4c:	00008003 	.word	0x00008003
 8001a50:	ffffbfff 	.word	0xffffbfff
 8001a54:	08001af3 	.word	0x08001af3
 8001a58:	ffff7fff 	.word	0xffff7fff

08001a5c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2241      	movs	r2, #65	@ 0x41
 8001a68:	5c9b      	ldrb	r3, [r3, r2]
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b60      	cmp	r3, #96	@ 0x60
 8001a6e:	d10f      	bne.n	8001a90 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2241      	movs	r2, #65	@ 0x41
 8001a74:	2120      	movs	r1, #32
 8001a76:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2240      	movs	r2, #64	@ 0x40
 8001a82:	2100      	movs	r1, #0
 8001a84:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7ff fb5c 	bl	8001146 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001a8e:	e00a      	b.n	8001aa6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2240      	movs	r2, #64	@ 0x40
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f7ff fb48 	bl	8001136 <HAL_I2C_ErrorCallback>
}
 8001aa6:	46c0      	nop			@ (mov r8, r8)
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	b002      	add	sp, #8
 8001aac:	bd80      	pop	{r7, pc}

08001aae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	2202      	movs	r2, #2
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d103      	bne.n	8001acc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d007      	beq.n	8001aea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	699a      	ldr	r2, [r3, #24]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	619a      	str	r2, [r3, #24]
  }
}
 8001aea:	46c0      	nop			@ (mov r8, r8)
 8001aec:	46bd      	mov	sp, r7
 8001aee:	b002      	add	sp, #8
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b084      	sub	sp, #16
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	0018      	movs	r0, r3
 8001b24:	f7ff ff9a 	bl	8001a5c <I2C_TreatErrorCallback>
}
 8001b28:	46c0      	nop			@ (mov r8, r8)
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b004      	add	sp, #16
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	1dfb      	adds	r3, r7, #7
 8001b3e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b40:	e030      	b.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	3301      	adds	r3, #1
 8001b46:	d02d      	beq.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b48:	f7fe fdb6 	bl	80006b8 <HAL_GetTick>
 8001b4c:	0002      	movs	r2, r0
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d302      	bcc.n	8001b5e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d122      	bne.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	4013      	ands	r3, r2
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	425a      	negs	r2, r3
 8001b6e:	4153      	adcs	r3, r2
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	001a      	movs	r2, r3
 8001b74:	1dfb      	adds	r3, r7, #7
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d113      	bne.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b80:	2220      	movs	r2, #32
 8001b82:	431a      	orrs	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2241      	movs	r2, #65	@ 0x41
 8001b8c:	2120      	movs	r1, #32
 8001b8e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2242      	movs	r2, #66	@ 0x42
 8001b94:	2100      	movs	r1, #0
 8001b96:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2240      	movs	r2, #64	@ 0x40
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e00f      	b.n	8001bc4 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	4013      	ands	r3, r2
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	425a      	negs	r2, r3
 8001bb4:	4153      	adcs	r3, r2
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	001a      	movs	r2, r3
 8001bba:	1dfb      	adds	r3, r7, #7
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d0bf      	beq.n	8001b42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	b004      	add	sp, #16
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bd8:	e032      	b.n	8001c40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	0018      	movs	r0, r3
 8001be2:	f000 f87d 	bl	8001ce0 <I2C_IsErrorOccurred>
 8001be6:	1e03      	subs	r3, r0, #0
 8001be8:	d001      	beq.n	8001bee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e030      	b.n	8001c50 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	d025      	beq.n	8001c40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bf4:	f7fe fd60 	bl	80006b8 <HAL_GetTick>
 8001bf8:	0002      	movs	r2, r0
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d302      	bcc.n	8001c0a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d11a      	bne.n	8001c40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2202      	movs	r2, #2
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d013      	beq.n	8001c40 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2241      	movs	r2, #65	@ 0x41
 8001c28:	2120      	movs	r1, #32
 8001c2a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2242      	movs	r2, #66	@ 0x42
 8001c30:	2100      	movs	r1, #0
 8001c32:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2240      	movs	r2, #64	@ 0x40
 8001c38:	2100      	movs	r1, #0
 8001c3a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e007      	b.n	8001c50 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2202      	movs	r2, #2
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d1c5      	bne.n	8001bda <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	0018      	movs	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b004      	add	sp, #16
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c64:	e02f      	b.n	8001cc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f000 f837 	bl	8001ce0 <I2C_IsErrorOccurred>
 8001c72:	1e03      	subs	r3, r0, #0
 8001c74:	d001      	beq.n	8001c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e02d      	b.n	8001cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c7a:	f7fe fd1d 	bl	80006b8 <HAL_GetTick>
 8001c7e:	0002      	movs	r2, r0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d302      	bcc.n	8001c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d11a      	bne.n	8001cc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	2220      	movs	r2, #32
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b20      	cmp	r3, #32
 8001c9c:	d013      	beq.n	8001cc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2241      	movs	r2, #65	@ 0x41
 8001cae:	2120      	movs	r1, #32
 8001cb0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2242      	movs	r2, #66	@ 0x42
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2240      	movs	r2, #64	@ 0x40
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e007      	b.n	8001cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b20      	cmp	r3, #32
 8001cd2:	d1c8      	bne.n	8001c66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b004      	add	sp, #16
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	@ 0x28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cec:	2327      	movs	r3, #39	@ 0x27
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	2210      	movs	r2, #16
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d100      	bne.n	8001d0e <I2C_IsErrorOccurred+0x2e>
 8001d0c:	e079      	b.n	8001e02 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2210      	movs	r2, #16
 8001d14:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d16:	e057      	b.n	8001dc8 <I2C_IsErrorOccurred+0xe8>
 8001d18:	2227      	movs	r2, #39	@ 0x27
 8001d1a:	18bb      	adds	r3, r7, r2
 8001d1c:	18ba      	adds	r2, r7, r2
 8001d1e:	7812      	ldrb	r2, [r2, #0]
 8001d20:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	3301      	adds	r3, #1
 8001d26:	d04f      	beq.n	8001dc8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d28:	f7fe fcc6 	bl	80006b8 <HAL_GetTick>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d302      	bcc.n	8001d3e <I2C_IsErrorOccurred+0x5e>
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d144      	bne.n	8001dc8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	2380      	movs	r3, #128	@ 0x80
 8001d46:	01db      	lsls	r3, r3, #7
 8001d48:	4013      	ands	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d4c:	2013      	movs	r0, #19
 8001d4e:	183b      	adds	r3, r7, r0
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	2142      	movs	r1, #66	@ 0x42
 8001d54:	5c52      	ldrb	r2, [r2, r1]
 8001d56:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699a      	ldr	r2, [r3, #24]
 8001d5e:	2380      	movs	r3, #128	@ 0x80
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	401a      	ands	r2, r3
 8001d64:	2380      	movs	r3, #128	@ 0x80
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d126      	bne.n	8001dba <I2C_IsErrorOccurred+0xda>
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	2380      	movs	r3, #128	@ 0x80
 8001d70:	01db      	lsls	r3, r3, #7
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d021      	beq.n	8001dba <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001d76:	183b      	adds	r3, r7, r0
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b20      	cmp	r3, #32
 8001d7c:	d01d      	beq.n	8001dba <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2180      	movs	r1, #128	@ 0x80
 8001d8a:	01c9      	lsls	r1, r1, #7
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d90:	f7fe fc92 	bl	80006b8 <HAL_GetTick>
 8001d94:	0003      	movs	r3, r0
 8001d96:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d98:	e00f      	b.n	8001dba <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d9a:	f7fe fc8d 	bl	80006b8 <HAL_GetTick>
 8001d9e:	0002      	movs	r2, r0
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b19      	cmp	r3, #25
 8001da6:	d908      	bls.n	8001dba <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	2220      	movs	r2, #32
 8001dac:	4313      	orrs	r3, r2
 8001dae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001db0:	2327      	movs	r3, #39	@ 0x27
 8001db2:	18fb      	adds	r3, r7, r3
 8001db4:	2201      	movs	r2, #1
 8001db6:	701a      	strb	r2, [r3, #0]

              break;
 8001db8:	e006      	b.n	8001dc8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b20      	cmp	r3, #32
 8001dc6:	d1e8      	bne.n	8001d9a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b20      	cmp	r3, #32
 8001dd4:	d004      	beq.n	8001de0 <I2C_IsErrorOccurred+0x100>
 8001dd6:	2327      	movs	r3, #39	@ 0x27
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d09b      	beq.n	8001d18 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001de0:	2327      	movs	r3, #39	@ 0x27
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d103      	bne.n	8001df2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2220      	movs	r2, #32
 8001df0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	2204      	movs	r2, #4
 8001df6:	4313      	orrs	r3, r2
 8001df8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001dfa:	2327      	movs	r3, #39	@ 0x27
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	2380      	movs	r3, #128	@ 0x80
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4013      	ands	r3, r2
 8001e12:	d00c      	beq.n	8001e2e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	2201      	movs	r2, #1
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2280      	movs	r2, #128	@ 0x80
 8001e22:	0052      	lsls	r2, r2, #1
 8001e24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e26:	2327      	movs	r3, #39	@ 0x27
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	2380      	movs	r3, #128	@ 0x80
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4013      	ands	r3, r2
 8001e36:	d00c      	beq.n	8001e52 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2280      	movs	r2, #128	@ 0x80
 8001e46:	00d2      	lsls	r2, r2, #3
 8001e48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e4a:	2327      	movs	r3, #39	@ 0x27
 8001e4c:	18fb      	adds	r3, r7, r3
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	2380      	movs	r3, #128	@ 0x80
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d00c      	beq.n	8001e76 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	4313      	orrs	r3, r2
 8001e62:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2280      	movs	r2, #128	@ 0x80
 8001e6a:	0092      	lsls	r2, r2, #2
 8001e6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e6e:	2327      	movs	r3, #39	@ 0x27
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	2201      	movs	r2, #1
 8001e74:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001e76:	2327      	movs	r3, #39	@ 0x27
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d01d      	beq.n	8001ebc <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	0018      	movs	r0, r3
 8001e84:	f7ff fe13 	bl	8001aae <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	490e      	ldr	r1, [pc, #56]	@ (8001ecc <I2C_IsErrorOccurred+0x1ec>)
 8001e94:	400a      	ands	r2, r1
 8001e96:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e9c:	6a3b      	ldr	r3, [r7, #32]
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2241      	movs	r2, #65	@ 0x41
 8001ea8:	2120      	movs	r1, #32
 8001eaa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2242      	movs	r2, #66	@ 0x42
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2240      	movs	r2, #64	@ 0x40
 8001eb8:	2100      	movs	r1, #0
 8001eba:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001ebc:	2327      	movs	r3, #39	@ 0x27
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	781b      	ldrb	r3, [r3, #0]
}
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b00a      	add	sp, #40	@ 0x28
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	46c0      	nop			@ (mov r8, r8)
 8001ecc:	fe00e800 	.word	0xfe00e800

08001ed0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b087      	sub	sp, #28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	0008      	movs	r0, r1
 8001eda:	0011      	movs	r1, r2
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	240a      	movs	r4, #10
 8001ee0:	193b      	adds	r3, r7, r4
 8001ee2:	1c02      	adds	r2, r0, #0
 8001ee4:	801a      	strh	r2, [r3, #0]
 8001ee6:	2009      	movs	r0, #9
 8001ee8:	183b      	adds	r3, r7, r0
 8001eea:	1c0a      	adds	r2, r1, #0
 8001eec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001eee:	193b      	adds	r3, r7, r4
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	059b      	lsls	r3, r3, #22
 8001ef4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ef6:	183b      	adds	r3, r7, r0
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	0419      	lsls	r1, r3, #16
 8001efc:	23ff      	movs	r3, #255	@ 0xff
 8001efe:	041b      	lsls	r3, r3, #16
 8001f00:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f02:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	085b      	lsrs	r3, r3, #1
 8001f10:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f1a:	0d51      	lsrs	r1, r2, #21
 8001f1c:	2280      	movs	r2, #128	@ 0x80
 8001f1e:	00d2      	lsls	r2, r2, #3
 8001f20:	400a      	ands	r2, r1
 8001f22:	4907      	ldr	r1, [pc, #28]	@ (8001f40 <I2C_TransferConfig+0x70>)
 8001f24:	430a      	orrs	r2, r1
 8001f26:	43d2      	mvns	r2, r2
 8001f28:	401a      	ands	r2, r3
 8001f2a:	0011      	movs	r1, r2
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f36:	46c0      	nop			@ (mov r8, r8)
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b007      	add	sp, #28
 8001f3c:	bd90      	pop	{r4, r7, pc}
 8001f3e:	46c0      	nop			@ (mov r8, r8)
 8001f40:	03ff63ff 	.word	0x03ff63ff

08001f44 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	000a      	movs	r2, r1
 8001f4e:	1cbb      	adds	r3, r7, #2
 8001f50:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001f56:	1cbb      	adds	r3, r7, #2
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d010      	beq.n	8001f82 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2242      	movs	r2, #66	@ 0x42
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2241      	movs	r2, #65	@ 0x41
 8001f6c:	5c9b      	ldrb	r3, [r3, r2]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	001a      	movs	r2, r3
 8001f72:	2328      	movs	r3, #40	@ 0x28
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b28      	cmp	r3, #40	@ 0x28
 8001f78:	d003      	beq.n	8001f82 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	22b0      	movs	r2, #176	@ 0xb0
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001f82:	1cbb      	adds	r3, r7, #2
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	2202      	movs	r2, #2
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d010      	beq.n	8001fae <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2244      	movs	r2, #68	@ 0x44
 8001f90:	4313      	orrs	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2241      	movs	r2, #65	@ 0x41
 8001f98:	5c9b      	ldrb	r3, [r3, r2]
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	001a      	movs	r2, r3
 8001f9e:	2328      	movs	r3, #40	@ 0x28
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b28      	cmp	r3, #40	@ 0x28
 8001fa4:	d003      	beq.n	8001fae <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	22b0      	movs	r2, #176	@ 0xb0
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001fae:	1cbb      	adds	r3, r7, #2
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	5e9b      	ldrsh	r3, [r3, r2]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	da03      	bge.n	8001fc0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	22b8      	movs	r2, #184	@ 0xb8
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8001fc0:	1cbb      	adds	r3, r7, #2
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	2b10      	cmp	r3, #16
 8001fc6:	d103      	bne.n	8001fd0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2290      	movs	r2, #144	@ 0x90
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8001fd0:	1cbb      	adds	r3, r7, #2
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	d103      	bne.n	8001fe0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8001fe0:	1cbb      	adds	r3, r7, #2
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	2b40      	cmp	r3, #64	@ 0x40
 8001fe6:	d103      	bne.n	8001ff0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2240      	movs	r2, #64	@ 0x40
 8001fec:	4313      	orrs	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	43d9      	mvns	r1, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	400a      	ands	r2, r1
 8002000:	601a      	str	r2, [r3, #0]
}
 8002002:	46c0      	nop			@ (mov r8, r8)
 8002004:	46bd      	mov	sp, r7
 8002006:	b004      	add	sp, #16
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2241      	movs	r2, #65	@ 0x41
 800201a:	5c9b      	ldrb	r3, [r3, r2]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b20      	cmp	r3, #32
 8002020:	d138      	bne.n	8002094 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2240      	movs	r2, #64	@ 0x40
 8002026:	5c9b      	ldrb	r3, [r3, r2]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800202c:	2302      	movs	r3, #2
 800202e:	e032      	b.n	8002096 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2240      	movs	r2, #64	@ 0x40
 8002034:	2101      	movs	r1, #1
 8002036:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2241      	movs	r2, #65	@ 0x41
 800203c:	2124      	movs	r1, #36	@ 0x24
 800203e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2101      	movs	r1, #1
 800204c:	438a      	bics	r2, r1
 800204e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4911      	ldr	r1, [pc, #68]	@ (80020a0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800205c:	400a      	ands	r2, r1
 800205e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6819      	ldr	r1, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2101      	movs	r1, #1
 800207c:	430a      	orrs	r2, r1
 800207e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2241      	movs	r2, #65	@ 0x41
 8002084:	2120      	movs	r1, #32
 8002086:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2240      	movs	r2, #64	@ 0x40
 800208c:	2100      	movs	r1, #0
 800208e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	e000      	b.n	8002096 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002094:	2302      	movs	r3, #2
  }
}
 8002096:	0018      	movs	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	b002      	add	sp, #8
 800209c:	bd80      	pop	{r7, pc}
 800209e:	46c0      	nop			@ (mov r8, r8)
 80020a0:	ffffefff 	.word	0xffffefff

080020a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2241      	movs	r2, #65	@ 0x41
 80020b2:	5c9b      	ldrb	r3, [r3, r2]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b20      	cmp	r3, #32
 80020b8:	d139      	bne.n	800212e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2240      	movs	r2, #64	@ 0x40
 80020be:	5c9b      	ldrb	r3, [r3, r2]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e033      	b.n	8002130 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2240      	movs	r2, #64	@ 0x40
 80020cc:	2101      	movs	r1, #1
 80020ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2241      	movs	r2, #65	@ 0x41
 80020d4:	2124      	movs	r1, #36	@ 0x24
 80020d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2101      	movs	r1, #1
 80020e4:	438a      	bics	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4a11      	ldr	r2, [pc, #68]	@ (8002138 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	021b      	lsls	r3, r3, #8
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2101      	movs	r1, #1
 8002116:	430a      	orrs	r2, r1
 8002118:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2241      	movs	r2, #65	@ 0x41
 800211e:	2120      	movs	r1, #32
 8002120:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2240      	movs	r2, #64	@ 0x40
 8002126:	2100      	movs	r1, #0
 8002128:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	e000      	b.n	8002130 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800212e:	2302      	movs	r3, #2
  }
}
 8002130:	0018      	movs	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	b004      	add	sp, #16
 8002136:	bd80      	pop	{r7, pc}
 8002138:	fffff0ff 	.word	0xfffff0ff

0800213c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e301      	b.n	8002752 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2201      	movs	r2, #1
 8002154:	4013      	ands	r3, r2
 8002156:	d100      	bne.n	800215a <HAL_RCC_OscConfig+0x1e>
 8002158:	e08d      	b.n	8002276 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800215a:	4bc3      	ldr	r3, [pc, #780]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	220c      	movs	r2, #12
 8002160:	4013      	ands	r3, r2
 8002162:	2b04      	cmp	r3, #4
 8002164:	d00e      	beq.n	8002184 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002166:	4bc0      	ldr	r3, [pc, #768]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	220c      	movs	r2, #12
 800216c:	4013      	ands	r3, r2
 800216e:	2b08      	cmp	r3, #8
 8002170:	d116      	bne.n	80021a0 <HAL_RCC_OscConfig+0x64>
 8002172:	4bbd      	ldr	r3, [pc, #756]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	2380      	movs	r3, #128	@ 0x80
 8002178:	025b      	lsls	r3, r3, #9
 800217a:	401a      	ands	r2, r3
 800217c:	2380      	movs	r3, #128	@ 0x80
 800217e:	025b      	lsls	r3, r3, #9
 8002180:	429a      	cmp	r2, r3
 8002182:	d10d      	bne.n	80021a0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002184:	4bb8      	ldr	r3, [pc, #736]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	2380      	movs	r3, #128	@ 0x80
 800218a:	029b      	lsls	r3, r3, #10
 800218c:	4013      	ands	r3, r2
 800218e:	d100      	bne.n	8002192 <HAL_RCC_OscConfig+0x56>
 8002190:	e070      	b.n	8002274 <HAL_RCC_OscConfig+0x138>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d000      	beq.n	800219c <HAL_RCC_OscConfig+0x60>
 800219a:	e06b      	b.n	8002274 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e2d8      	b.n	8002752 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d107      	bne.n	80021b8 <HAL_RCC_OscConfig+0x7c>
 80021a8:	4baf      	ldr	r3, [pc, #700]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4bae      	ldr	r3, [pc, #696]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 80021ae:	2180      	movs	r1, #128	@ 0x80
 80021b0:	0249      	lsls	r1, r1, #9
 80021b2:	430a      	orrs	r2, r1
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	e02f      	b.n	8002218 <HAL_RCC_OscConfig+0xdc>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10c      	bne.n	80021da <HAL_RCC_OscConfig+0x9e>
 80021c0:	4ba9      	ldr	r3, [pc, #676]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4ba8      	ldr	r3, [pc, #672]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 80021c6:	49a9      	ldr	r1, [pc, #676]	@ (800246c <HAL_RCC_OscConfig+0x330>)
 80021c8:	400a      	ands	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	4ba6      	ldr	r3, [pc, #664]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4ba5      	ldr	r3, [pc, #660]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 80021d2:	49a7      	ldr	r1, [pc, #668]	@ (8002470 <HAL_RCC_OscConfig+0x334>)
 80021d4:	400a      	ands	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	e01e      	b.n	8002218 <HAL_RCC_OscConfig+0xdc>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b05      	cmp	r3, #5
 80021e0:	d10e      	bne.n	8002200 <HAL_RCC_OscConfig+0xc4>
 80021e2:	4ba1      	ldr	r3, [pc, #644]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	4ba0      	ldr	r3, [pc, #640]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 80021e8:	2180      	movs	r1, #128	@ 0x80
 80021ea:	02c9      	lsls	r1, r1, #11
 80021ec:	430a      	orrs	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	4b9d      	ldr	r3, [pc, #628]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b9c      	ldr	r3, [pc, #624]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 80021f6:	2180      	movs	r1, #128	@ 0x80
 80021f8:	0249      	lsls	r1, r1, #9
 80021fa:	430a      	orrs	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	e00b      	b.n	8002218 <HAL_RCC_OscConfig+0xdc>
 8002200:	4b99      	ldr	r3, [pc, #612]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b98      	ldr	r3, [pc, #608]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002206:	4999      	ldr	r1, [pc, #612]	@ (800246c <HAL_RCC_OscConfig+0x330>)
 8002208:	400a      	ands	r2, r1
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	4b96      	ldr	r3, [pc, #600]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b95      	ldr	r3, [pc, #596]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002212:	4997      	ldr	r1, [pc, #604]	@ (8002470 <HAL_RCC_OscConfig+0x334>)
 8002214:	400a      	ands	r2, r1
 8002216:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d014      	beq.n	800224a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7fe fa4a 	bl	80006b8 <HAL_GetTick>
 8002224:	0003      	movs	r3, r0
 8002226:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800222a:	f7fe fa45 	bl	80006b8 <HAL_GetTick>
 800222e:	0002      	movs	r2, r0
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b64      	cmp	r3, #100	@ 0x64
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e28a      	b.n	8002752 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223c:	4b8a      	ldr	r3, [pc, #552]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	2380      	movs	r3, #128	@ 0x80
 8002242:	029b      	lsls	r3, r3, #10
 8002244:	4013      	ands	r3, r2
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0xee>
 8002248:	e015      	b.n	8002276 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224a:	f7fe fa35 	bl	80006b8 <HAL_GetTick>
 800224e:	0003      	movs	r3, r0
 8002250:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002254:	f7fe fa30 	bl	80006b8 <HAL_GetTick>
 8002258:	0002      	movs	r2, r0
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b64      	cmp	r3, #100	@ 0x64
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e275      	b.n	8002752 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002266:	4b80      	ldr	r3, [pc, #512]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	2380      	movs	r3, #128	@ 0x80
 800226c:	029b      	lsls	r3, r3, #10
 800226e:	4013      	ands	r3, r2
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x118>
 8002272:	e000      	b.n	8002276 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002274:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2202      	movs	r2, #2
 800227c:	4013      	ands	r3, r2
 800227e:	d100      	bne.n	8002282 <HAL_RCC_OscConfig+0x146>
 8002280:	e069      	b.n	8002356 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002282:	4b79      	ldr	r3, [pc, #484]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	220c      	movs	r2, #12
 8002288:	4013      	ands	r3, r2
 800228a:	d00b      	beq.n	80022a4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800228c:	4b76      	ldr	r3, [pc, #472]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	220c      	movs	r2, #12
 8002292:	4013      	ands	r3, r2
 8002294:	2b08      	cmp	r3, #8
 8002296:	d11c      	bne.n	80022d2 <HAL_RCC_OscConfig+0x196>
 8002298:	4b73      	ldr	r3, [pc, #460]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	2380      	movs	r3, #128	@ 0x80
 800229e:	025b      	lsls	r3, r3, #9
 80022a0:	4013      	ands	r3, r2
 80022a2:	d116      	bne.n	80022d2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a4:	4b70      	ldr	r3, [pc, #448]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2202      	movs	r2, #2
 80022aa:	4013      	ands	r3, r2
 80022ac:	d005      	beq.n	80022ba <HAL_RCC_OscConfig+0x17e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d001      	beq.n	80022ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e24b      	b.n	8002752 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ba:	4b6b      	ldr	r3, [pc, #428]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	22f8      	movs	r2, #248	@ 0xf8
 80022c0:	4393      	bics	r3, r2
 80022c2:	0019      	movs	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	00da      	lsls	r2, r3, #3
 80022ca:	4b67      	ldr	r3, [pc, #412]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 80022cc:	430a      	orrs	r2, r1
 80022ce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d0:	e041      	b.n	8002356 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d024      	beq.n	8002324 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022da:	4b63      	ldr	r3, [pc, #396]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b62      	ldr	r3, [pc, #392]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 80022e0:	2101      	movs	r1, #1
 80022e2:	430a      	orrs	r2, r1
 80022e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7fe f9e7 	bl	80006b8 <HAL_GetTick>
 80022ea:	0003      	movs	r3, r0
 80022ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f0:	f7fe f9e2 	bl	80006b8 <HAL_GetTick>
 80022f4:	0002      	movs	r2, r0
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e227      	b.n	8002752 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002302:	4b59      	ldr	r3, [pc, #356]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2202      	movs	r2, #2
 8002308:	4013      	ands	r3, r2
 800230a:	d0f1      	beq.n	80022f0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230c:	4b56      	ldr	r3, [pc, #344]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	22f8      	movs	r2, #248	@ 0xf8
 8002312:	4393      	bics	r3, r2
 8002314:	0019      	movs	r1, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	00da      	lsls	r2, r3, #3
 800231c:	4b52      	ldr	r3, [pc, #328]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 800231e:	430a      	orrs	r2, r1
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	e018      	b.n	8002356 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002324:	4b50      	ldr	r3, [pc, #320]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4b4f      	ldr	r3, [pc, #316]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 800232a:	2101      	movs	r1, #1
 800232c:	438a      	bics	r2, r1
 800232e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7fe f9c2 	bl	80006b8 <HAL_GetTick>
 8002334:	0003      	movs	r3, r0
 8002336:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800233a:	f7fe f9bd 	bl	80006b8 <HAL_GetTick>
 800233e:	0002      	movs	r2, r0
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e202      	b.n	8002752 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234c:	4b46      	ldr	r3, [pc, #280]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2202      	movs	r2, #2
 8002352:	4013      	ands	r3, r2
 8002354:	d1f1      	bne.n	800233a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2208      	movs	r2, #8
 800235c:	4013      	ands	r3, r2
 800235e:	d036      	beq.n	80023ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d019      	beq.n	800239c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002368:	4b3f      	ldr	r3, [pc, #252]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 800236a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800236c:	4b3e      	ldr	r3, [pc, #248]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 800236e:	2101      	movs	r1, #1
 8002370:	430a      	orrs	r2, r1
 8002372:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002374:	f7fe f9a0 	bl	80006b8 <HAL_GetTick>
 8002378:	0003      	movs	r3, r0
 800237a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237e:	f7fe f99b 	bl	80006b8 <HAL_GetTick>
 8002382:	0002      	movs	r2, r0
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e1e0      	b.n	8002752 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002390:	4b35      	ldr	r3, [pc, #212]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002394:	2202      	movs	r2, #2
 8002396:	4013      	ands	r3, r2
 8002398:	d0f1      	beq.n	800237e <HAL_RCC_OscConfig+0x242>
 800239a:	e018      	b.n	80023ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800239c:	4b32      	ldr	r3, [pc, #200]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 800239e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023a0:	4b31      	ldr	r3, [pc, #196]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 80023a2:	2101      	movs	r1, #1
 80023a4:	438a      	bics	r2, r1
 80023a6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a8:	f7fe f986 	bl	80006b8 <HAL_GetTick>
 80023ac:	0003      	movs	r3, r0
 80023ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b2:	f7fe f981 	bl	80006b8 <HAL_GetTick>
 80023b6:	0002      	movs	r2, r0
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e1c6      	b.n	8002752 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c4:	4b28      	ldr	r3, [pc, #160]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 80023c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c8:	2202      	movs	r2, #2
 80023ca:	4013      	ands	r3, r2
 80023cc:	d1f1      	bne.n	80023b2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2204      	movs	r2, #4
 80023d4:	4013      	ands	r3, r2
 80023d6:	d100      	bne.n	80023da <HAL_RCC_OscConfig+0x29e>
 80023d8:	e0b4      	b.n	8002544 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023da:	201f      	movs	r0, #31
 80023dc:	183b      	adds	r3, r7, r0
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e2:	4b21      	ldr	r3, [pc, #132]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 80023e4:	69da      	ldr	r2, [r3, #28]
 80023e6:	2380      	movs	r3, #128	@ 0x80
 80023e8:	055b      	lsls	r3, r3, #21
 80023ea:	4013      	ands	r3, r2
 80023ec:	d110      	bne.n	8002410 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 80023f0:	69da      	ldr	r2, [r3, #28]
 80023f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 80023f4:	2180      	movs	r1, #128	@ 0x80
 80023f6:	0549      	lsls	r1, r1, #21
 80023f8:	430a      	orrs	r2, r1
 80023fa:	61da      	str	r2, [r3, #28]
 80023fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 80023fe:	69da      	ldr	r2, [r3, #28]
 8002400:	2380      	movs	r3, #128	@ 0x80
 8002402:	055b      	lsls	r3, r3, #21
 8002404:	4013      	ands	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800240a:	183b      	adds	r3, r7, r0
 800240c:	2201      	movs	r2, #1
 800240e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002410:	4b18      	ldr	r3, [pc, #96]	@ (8002474 <HAL_RCC_OscConfig+0x338>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	2380      	movs	r3, #128	@ 0x80
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	4013      	ands	r3, r2
 800241a:	d11a      	bne.n	8002452 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800241c:	4b15      	ldr	r3, [pc, #84]	@ (8002474 <HAL_RCC_OscConfig+0x338>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b14      	ldr	r3, [pc, #80]	@ (8002474 <HAL_RCC_OscConfig+0x338>)
 8002422:	2180      	movs	r1, #128	@ 0x80
 8002424:	0049      	lsls	r1, r1, #1
 8002426:	430a      	orrs	r2, r1
 8002428:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242a:	f7fe f945 	bl	80006b8 <HAL_GetTick>
 800242e:	0003      	movs	r3, r0
 8002430:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002434:	f7fe f940 	bl	80006b8 <HAL_GetTick>
 8002438:	0002      	movs	r2, r0
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	@ 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e185      	b.n	8002752 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002446:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <HAL_RCC_OscConfig+0x338>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	2380      	movs	r3, #128	@ 0x80
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4013      	ands	r3, r2
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d10e      	bne.n	8002478 <HAL_RCC_OscConfig+0x33c>
 800245a:	4b03      	ldr	r3, [pc, #12]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 800245c:	6a1a      	ldr	r2, [r3, #32]
 800245e:	4b02      	ldr	r3, [pc, #8]	@ (8002468 <HAL_RCC_OscConfig+0x32c>)
 8002460:	2101      	movs	r1, #1
 8002462:	430a      	orrs	r2, r1
 8002464:	621a      	str	r2, [r3, #32]
 8002466:	e035      	b.n	80024d4 <HAL_RCC_OscConfig+0x398>
 8002468:	40021000 	.word	0x40021000
 800246c:	fffeffff 	.word	0xfffeffff
 8002470:	fffbffff 	.word	0xfffbffff
 8002474:	40007000 	.word	0x40007000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10c      	bne.n	800249a <HAL_RCC_OscConfig+0x35e>
 8002480:	4bb6      	ldr	r3, [pc, #728]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 8002482:	6a1a      	ldr	r2, [r3, #32]
 8002484:	4bb5      	ldr	r3, [pc, #724]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 8002486:	2101      	movs	r1, #1
 8002488:	438a      	bics	r2, r1
 800248a:	621a      	str	r2, [r3, #32]
 800248c:	4bb3      	ldr	r3, [pc, #716]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 800248e:	6a1a      	ldr	r2, [r3, #32]
 8002490:	4bb2      	ldr	r3, [pc, #712]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 8002492:	2104      	movs	r1, #4
 8002494:	438a      	bics	r2, r1
 8002496:	621a      	str	r2, [r3, #32]
 8002498:	e01c      	b.n	80024d4 <HAL_RCC_OscConfig+0x398>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b05      	cmp	r3, #5
 80024a0:	d10c      	bne.n	80024bc <HAL_RCC_OscConfig+0x380>
 80024a2:	4bae      	ldr	r3, [pc, #696]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 80024a4:	6a1a      	ldr	r2, [r3, #32]
 80024a6:	4bad      	ldr	r3, [pc, #692]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 80024a8:	2104      	movs	r1, #4
 80024aa:	430a      	orrs	r2, r1
 80024ac:	621a      	str	r2, [r3, #32]
 80024ae:	4bab      	ldr	r3, [pc, #684]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 80024b0:	6a1a      	ldr	r2, [r3, #32]
 80024b2:	4baa      	ldr	r3, [pc, #680]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 80024b4:	2101      	movs	r1, #1
 80024b6:	430a      	orrs	r2, r1
 80024b8:	621a      	str	r2, [r3, #32]
 80024ba:	e00b      	b.n	80024d4 <HAL_RCC_OscConfig+0x398>
 80024bc:	4ba7      	ldr	r3, [pc, #668]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 80024be:	6a1a      	ldr	r2, [r3, #32]
 80024c0:	4ba6      	ldr	r3, [pc, #664]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 80024c2:	2101      	movs	r1, #1
 80024c4:	438a      	bics	r2, r1
 80024c6:	621a      	str	r2, [r3, #32]
 80024c8:	4ba4      	ldr	r3, [pc, #656]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 80024ca:	6a1a      	ldr	r2, [r3, #32]
 80024cc:	4ba3      	ldr	r3, [pc, #652]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 80024ce:	2104      	movs	r1, #4
 80024d0:	438a      	bics	r2, r1
 80024d2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d014      	beq.n	8002506 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024dc:	f7fe f8ec 	bl	80006b8 <HAL_GetTick>
 80024e0:	0003      	movs	r3, r0
 80024e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e4:	e009      	b.n	80024fa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e6:	f7fe f8e7 	bl	80006b8 <HAL_GetTick>
 80024ea:	0002      	movs	r2, r0
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	4a9b      	ldr	r2, [pc, #620]	@ (8002760 <HAL_RCC_OscConfig+0x624>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e12b      	b.n	8002752 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fa:	4b98      	ldr	r3, [pc, #608]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	2202      	movs	r2, #2
 8002500:	4013      	ands	r3, r2
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x3aa>
 8002504:	e013      	b.n	800252e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002506:	f7fe f8d7 	bl	80006b8 <HAL_GetTick>
 800250a:	0003      	movs	r3, r0
 800250c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800250e:	e009      	b.n	8002524 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002510:	f7fe f8d2 	bl	80006b8 <HAL_GetTick>
 8002514:	0002      	movs	r2, r0
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	4a91      	ldr	r2, [pc, #580]	@ (8002760 <HAL_RCC_OscConfig+0x624>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e116      	b.n	8002752 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002524:	4b8d      	ldr	r3, [pc, #564]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	2202      	movs	r2, #2
 800252a:	4013      	ands	r3, r2
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800252e:	231f      	movs	r3, #31
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d105      	bne.n	8002544 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002538:	4b88      	ldr	r3, [pc, #544]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 800253a:	69da      	ldr	r2, [r3, #28]
 800253c:	4b87      	ldr	r3, [pc, #540]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 800253e:	4989      	ldr	r1, [pc, #548]	@ (8002764 <HAL_RCC_OscConfig+0x628>)
 8002540:	400a      	ands	r2, r1
 8002542:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2210      	movs	r2, #16
 800254a:	4013      	ands	r3, r2
 800254c:	d063      	beq.n	8002616 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d12a      	bne.n	80025ac <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002556:	4b81      	ldr	r3, [pc, #516]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 8002558:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800255a:	4b80      	ldr	r3, [pc, #512]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 800255c:	2104      	movs	r1, #4
 800255e:	430a      	orrs	r2, r1
 8002560:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002562:	4b7e      	ldr	r3, [pc, #504]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 8002564:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002566:	4b7d      	ldr	r3, [pc, #500]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 8002568:	2101      	movs	r1, #1
 800256a:	430a      	orrs	r2, r1
 800256c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256e:	f7fe f8a3 	bl	80006b8 <HAL_GetTick>
 8002572:	0003      	movs	r3, r0
 8002574:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002578:	f7fe f89e 	bl	80006b8 <HAL_GetTick>
 800257c:	0002      	movs	r2, r0
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e0e3      	b.n	8002752 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800258a:	4b74      	ldr	r3, [pc, #464]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 800258c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800258e:	2202      	movs	r2, #2
 8002590:	4013      	ands	r3, r2
 8002592:	d0f1      	beq.n	8002578 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002594:	4b71      	ldr	r3, [pc, #452]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 8002596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002598:	22f8      	movs	r2, #248	@ 0xf8
 800259a:	4393      	bics	r3, r2
 800259c:	0019      	movs	r1, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	00da      	lsls	r2, r3, #3
 80025a4:	4b6d      	ldr	r3, [pc, #436]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 80025a6:	430a      	orrs	r2, r1
 80025a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80025aa:	e034      	b.n	8002616 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	3305      	adds	r3, #5
 80025b2:	d111      	bne.n	80025d8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80025b4:	4b69      	ldr	r3, [pc, #420]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 80025b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025b8:	4b68      	ldr	r3, [pc, #416]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 80025ba:	2104      	movs	r1, #4
 80025bc:	438a      	bics	r2, r1
 80025be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80025c0:	4b66      	ldr	r3, [pc, #408]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 80025c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025c4:	22f8      	movs	r2, #248	@ 0xf8
 80025c6:	4393      	bics	r3, r2
 80025c8:	0019      	movs	r1, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	00da      	lsls	r2, r3, #3
 80025d0:	4b62      	ldr	r3, [pc, #392]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 80025d2:	430a      	orrs	r2, r1
 80025d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80025d6:	e01e      	b.n	8002616 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80025d8:	4b60      	ldr	r3, [pc, #384]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 80025da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025dc:	4b5f      	ldr	r3, [pc, #380]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 80025de:	2104      	movs	r1, #4
 80025e0:	430a      	orrs	r2, r1
 80025e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80025e4:	4b5d      	ldr	r3, [pc, #372]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 80025e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025e8:	4b5c      	ldr	r3, [pc, #368]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 80025ea:	2101      	movs	r1, #1
 80025ec:	438a      	bics	r2, r1
 80025ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f0:	f7fe f862 	bl	80006b8 <HAL_GetTick>
 80025f4:	0003      	movs	r3, r0
 80025f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80025fa:	f7fe f85d 	bl	80006b8 <HAL_GetTick>
 80025fe:	0002      	movs	r2, r0
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e0a2      	b.n	8002752 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800260c:	4b53      	ldr	r3, [pc, #332]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 800260e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002610:	2202      	movs	r2, #2
 8002612:	4013      	ands	r3, r2
 8002614:	d1f1      	bne.n	80025fa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d100      	bne.n	8002620 <HAL_RCC_OscConfig+0x4e4>
 800261e:	e097      	b.n	8002750 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002620:	4b4e      	ldr	r3, [pc, #312]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	220c      	movs	r2, #12
 8002626:	4013      	ands	r3, r2
 8002628:	2b08      	cmp	r3, #8
 800262a:	d100      	bne.n	800262e <HAL_RCC_OscConfig+0x4f2>
 800262c:	e06b      	b.n	8002706 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d14c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002636:	4b49      	ldr	r3, [pc, #292]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	4b48      	ldr	r3, [pc, #288]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 800263c:	494a      	ldr	r1, [pc, #296]	@ (8002768 <HAL_RCC_OscConfig+0x62c>)
 800263e:	400a      	ands	r2, r1
 8002640:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002642:	f7fe f839 	bl	80006b8 <HAL_GetTick>
 8002646:	0003      	movs	r3, r0
 8002648:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800264c:	f7fe f834 	bl	80006b8 <HAL_GetTick>
 8002650:	0002      	movs	r2, r0
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e079      	b.n	8002752 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800265e:	4b3f      	ldr	r3, [pc, #252]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	2380      	movs	r3, #128	@ 0x80
 8002664:	049b      	lsls	r3, r3, #18
 8002666:	4013      	ands	r3, r2
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800266a:	4b3c      	ldr	r3, [pc, #240]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 800266c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266e:	220f      	movs	r2, #15
 8002670:	4393      	bics	r3, r2
 8002672:	0019      	movs	r1, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002678:	4b38      	ldr	r3, [pc, #224]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 800267a:	430a      	orrs	r2, r1
 800267c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800267e:	4b37      	ldr	r3, [pc, #220]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	4a3a      	ldr	r2, [pc, #232]	@ (800276c <HAL_RCC_OscConfig+0x630>)
 8002684:	4013      	ands	r3, r2
 8002686:	0019      	movs	r1, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002690:	431a      	orrs	r2, r3
 8002692:	4b32      	ldr	r3, [pc, #200]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 8002694:	430a      	orrs	r2, r1
 8002696:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002698:	4b30      	ldr	r3, [pc, #192]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b2f      	ldr	r3, [pc, #188]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 800269e:	2180      	movs	r1, #128	@ 0x80
 80026a0:	0449      	lsls	r1, r1, #17
 80026a2:	430a      	orrs	r2, r1
 80026a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a6:	f7fe f807 	bl	80006b8 <HAL_GetTick>
 80026aa:	0003      	movs	r3, r0
 80026ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b0:	f7fe f802 	bl	80006b8 <HAL_GetTick>
 80026b4:	0002      	movs	r2, r0
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e047      	b.n	8002752 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c2:	4b26      	ldr	r3, [pc, #152]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	2380      	movs	r3, #128	@ 0x80
 80026c8:	049b      	lsls	r3, r3, #18
 80026ca:	4013      	ands	r3, r2
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x574>
 80026ce:	e03f      	b.n	8002750 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d0:	4b22      	ldr	r3, [pc, #136]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b21      	ldr	r3, [pc, #132]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 80026d6:	4924      	ldr	r1, [pc, #144]	@ (8002768 <HAL_RCC_OscConfig+0x62c>)
 80026d8:	400a      	ands	r2, r1
 80026da:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7fd ffec 	bl	80006b8 <HAL_GetTick>
 80026e0:	0003      	movs	r3, r0
 80026e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e6:	f7fd ffe7 	bl	80006b8 <HAL_GetTick>
 80026ea:	0002      	movs	r2, r0
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e02c      	b.n	8002752 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f8:	4b18      	ldr	r3, [pc, #96]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	2380      	movs	r3, #128	@ 0x80
 80026fe:	049b      	lsls	r3, r3, #18
 8002700:	4013      	ands	r3, r2
 8002702:	d1f0      	bne.n	80026e6 <HAL_RCC_OscConfig+0x5aa>
 8002704:	e024      	b.n	8002750 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e01f      	b.n	8002752 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002712:	4b12      	ldr	r3, [pc, #72]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002718:	4b10      	ldr	r3, [pc, #64]	@ (800275c <HAL_RCC_OscConfig+0x620>)
 800271a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	2380      	movs	r3, #128	@ 0x80
 8002722:	025b      	lsls	r3, r3, #9
 8002724:	401a      	ands	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272a:	429a      	cmp	r2, r3
 800272c:	d10e      	bne.n	800274c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	220f      	movs	r2, #15
 8002732:	401a      	ands	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002738:	429a      	cmp	r2, r3
 800273a:	d107      	bne.n	800274c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	23f0      	movs	r3, #240	@ 0xf0
 8002740:	039b      	lsls	r3, r3, #14
 8002742:	401a      	ands	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	0018      	movs	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	b008      	add	sp, #32
 8002758:	bd80      	pop	{r7, pc}
 800275a:	46c0      	nop			@ (mov r8, r8)
 800275c:	40021000 	.word	0x40021000
 8002760:	00001388 	.word	0x00001388
 8002764:	efffffff 	.word	0xefffffff
 8002768:	feffffff 	.word	0xfeffffff
 800276c:	ffc2ffff 	.word	0xffc2ffff

08002770 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0b3      	b.n	80028ec <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002784:	4b5b      	ldr	r3, [pc, #364]	@ (80028f4 <HAL_RCC_ClockConfig+0x184>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2201      	movs	r2, #1
 800278a:	4013      	ands	r3, r2
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d911      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002792:	4b58      	ldr	r3, [pc, #352]	@ (80028f4 <HAL_RCC_ClockConfig+0x184>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2201      	movs	r2, #1
 8002798:	4393      	bics	r3, r2
 800279a:	0019      	movs	r1, r3
 800279c:	4b55      	ldr	r3, [pc, #340]	@ (80028f4 <HAL_RCC_ClockConfig+0x184>)
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a4:	4b53      	ldr	r3, [pc, #332]	@ (80028f4 <HAL_RCC_ClockConfig+0x184>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2201      	movs	r2, #1
 80027aa:	4013      	ands	r3, r2
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d001      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e09a      	b.n	80028ec <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2202      	movs	r2, #2
 80027bc:	4013      	ands	r3, r2
 80027be:	d015      	beq.n	80027ec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2204      	movs	r2, #4
 80027c6:	4013      	ands	r3, r2
 80027c8:	d006      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80027ca:	4b4b      	ldr	r3, [pc, #300]	@ (80028f8 <HAL_RCC_ClockConfig+0x188>)
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	4b4a      	ldr	r3, [pc, #296]	@ (80028f8 <HAL_RCC_ClockConfig+0x188>)
 80027d0:	21e0      	movs	r1, #224	@ 0xe0
 80027d2:	00c9      	lsls	r1, r1, #3
 80027d4:	430a      	orrs	r2, r1
 80027d6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d8:	4b47      	ldr	r3, [pc, #284]	@ (80028f8 <HAL_RCC_ClockConfig+0x188>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	22f0      	movs	r2, #240	@ 0xf0
 80027de:	4393      	bics	r3, r2
 80027e0:	0019      	movs	r1, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	4b44      	ldr	r3, [pc, #272]	@ (80028f8 <HAL_RCC_ClockConfig+0x188>)
 80027e8:	430a      	orrs	r2, r1
 80027ea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2201      	movs	r2, #1
 80027f2:	4013      	ands	r3, r2
 80027f4:	d040      	beq.n	8002878 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d107      	bne.n	800280e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	4b3e      	ldr	r3, [pc, #248]	@ (80028f8 <HAL_RCC_ClockConfig+0x188>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	2380      	movs	r3, #128	@ 0x80
 8002804:	029b      	lsls	r3, r3, #10
 8002806:	4013      	ands	r3, r2
 8002808:	d114      	bne.n	8002834 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e06e      	b.n	80028ec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d107      	bne.n	8002826 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002816:	4b38      	ldr	r3, [pc, #224]	@ (80028f8 <HAL_RCC_ClockConfig+0x188>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	2380      	movs	r3, #128	@ 0x80
 800281c:	049b      	lsls	r3, r3, #18
 800281e:	4013      	ands	r3, r2
 8002820:	d108      	bne.n	8002834 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e062      	b.n	80028ec <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002826:	4b34      	ldr	r3, [pc, #208]	@ (80028f8 <HAL_RCC_ClockConfig+0x188>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2202      	movs	r2, #2
 800282c:	4013      	ands	r3, r2
 800282e:	d101      	bne.n	8002834 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e05b      	b.n	80028ec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002834:	4b30      	ldr	r3, [pc, #192]	@ (80028f8 <HAL_RCC_ClockConfig+0x188>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2203      	movs	r2, #3
 800283a:	4393      	bics	r3, r2
 800283c:	0019      	movs	r1, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	4b2d      	ldr	r3, [pc, #180]	@ (80028f8 <HAL_RCC_ClockConfig+0x188>)
 8002844:	430a      	orrs	r2, r1
 8002846:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002848:	f7fd ff36 	bl	80006b8 <HAL_GetTick>
 800284c:	0003      	movs	r3, r0
 800284e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002850:	e009      	b.n	8002866 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002852:	f7fd ff31 	bl	80006b8 <HAL_GetTick>
 8002856:	0002      	movs	r2, r0
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	4a27      	ldr	r2, [pc, #156]	@ (80028fc <HAL_RCC_ClockConfig+0x18c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e042      	b.n	80028ec <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002866:	4b24      	ldr	r3, [pc, #144]	@ (80028f8 <HAL_RCC_ClockConfig+0x188>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	220c      	movs	r2, #12
 800286c:	401a      	ands	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	429a      	cmp	r2, r3
 8002876:	d1ec      	bne.n	8002852 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002878:	4b1e      	ldr	r3, [pc, #120]	@ (80028f4 <HAL_RCC_ClockConfig+0x184>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2201      	movs	r2, #1
 800287e:	4013      	ands	r3, r2
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d211      	bcs.n	80028aa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002886:	4b1b      	ldr	r3, [pc, #108]	@ (80028f4 <HAL_RCC_ClockConfig+0x184>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2201      	movs	r2, #1
 800288c:	4393      	bics	r3, r2
 800288e:	0019      	movs	r1, r3
 8002890:	4b18      	ldr	r3, [pc, #96]	@ (80028f4 <HAL_RCC_ClockConfig+0x184>)
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002898:	4b16      	ldr	r3, [pc, #88]	@ (80028f4 <HAL_RCC_ClockConfig+0x184>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2201      	movs	r2, #1
 800289e:	4013      	ands	r3, r2
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d001      	beq.n	80028aa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e020      	b.n	80028ec <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2204      	movs	r2, #4
 80028b0:	4013      	ands	r3, r2
 80028b2:	d009      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80028b4:	4b10      	ldr	r3, [pc, #64]	@ (80028f8 <HAL_RCC_ClockConfig+0x188>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a11      	ldr	r2, [pc, #68]	@ (8002900 <HAL_RCC_ClockConfig+0x190>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	4b0d      	ldr	r3, [pc, #52]	@ (80028f8 <HAL_RCC_ClockConfig+0x188>)
 80028c4:	430a      	orrs	r2, r1
 80028c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028c8:	f000 f820 	bl	800290c <HAL_RCC_GetSysClockFreq>
 80028cc:	0001      	movs	r1, r0
 80028ce:	4b0a      	ldr	r3, [pc, #40]	@ (80028f8 <HAL_RCC_ClockConfig+0x188>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	220f      	movs	r2, #15
 80028d6:	4013      	ands	r3, r2
 80028d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002904 <HAL_RCC_ClockConfig+0x194>)
 80028da:	5cd3      	ldrb	r3, [r2, r3]
 80028dc:	000a      	movs	r2, r1
 80028de:	40da      	lsrs	r2, r3
 80028e0:	4b09      	ldr	r3, [pc, #36]	@ (8002908 <HAL_RCC_ClockConfig+0x198>)
 80028e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80028e4:	2003      	movs	r0, #3
 80028e6:	f7fd fea1 	bl	800062c <HAL_InitTick>
  
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	0018      	movs	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b004      	add	sp, #16
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40022000 	.word	0x40022000
 80028f8:	40021000 	.word	0x40021000
 80028fc:	00001388 	.word	0x00001388
 8002900:	fffff8ff 	.word	0xfffff8ff
 8002904:	08002bcc 	.word	0x08002bcc
 8002908:	20000000 	.word	0x20000000

0800290c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	2300      	movs	r3, #0
 8002920:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002926:	4b20      	ldr	r3, [pc, #128]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	220c      	movs	r2, #12
 8002930:	4013      	ands	r3, r2
 8002932:	2b04      	cmp	r3, #4
 8002934:	d002      	beq.n	800293c <HAL_RCC_GetSysClockFreq+0x30>
 8002936:	2b08      	cmp	r3, #8
 8002938:	d003      	beq.n	8002942 <HAL_RCC_GetSysClockFreq+0x36>
 800293a:	e02c      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800293c:	4b1b      	ldr	r3, [pc, #108]	@ (80029ac <HAL_RCC_GetSysClockFreq+0xa0>)
 800293e:	613b      	str	r3, [r7, #16]
      break;
 8002940:	e02c      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	0c9b      	lsrs	r3, r3, #18
 8002946:	220f      	movs	r2, #15
 8002948:	4013      	ands	r3, r2
 800294a:	4a19      	ldr	r2, [pc, #100]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800294c:	5cd3      	ldrb	r3, [r2, r3]
 800294e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002950:	4b15      	ldr	r3, [pc, #84]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002954:	220f      	movs	r2, #15
 8002956:	4013      	ands	r3, r2
 8002958:	4a16      	ldr	r2, [pc, #88]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800295a:	5cd3      	ldrb	r3, [r2, r3]
 800295c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	2380      	movs	r3, #128	@ 0x80
 8002962:	025b      	lsls	r3, r3, #9
 8002964:	4013      	ands	r3, r2
 8002966:	d009      	beq.n	800297c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	4810      	ldr	r0, [pc, #64]	@ (80029ac <HAL_RCC_GetSysClockFreq+0xa0>)
 800296c:	f7fd fbcc 	bl	8000108 <__udivsi3>
 8002970:	0003      	movs	r3, r0
 8002972:	001a      	movs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4353      	muls	r3, r2
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	e009      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	000a      	movs	r2, r1
 8002980:	0152      	lsls	r2, r2, #5
 8002982:	1a52      	subs	r2, r2, r1
 8002984:	0193      	lsls	r3, r2, #6
 8002986:	1a9b      	subs	r3, r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	185b      	adds	r3, r3, r1
 800298c:	021b      	lsls	r3, r3, #8
 800298e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	613b      	str	r3, [r7, #16]
      break;
 8002994:	e002      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002996:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002998:	613b      	str	r3, [r7, #16]
      break;
 800299a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800299c:	693b      	ldr	r3, [r7, #16]
}
 800299e:	0018      	movs	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	b006      	add	sp, #24
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	46c0      	nop			@ (mov r8, r8)
 80029a8:	40021000 	.word	0x40021000
 80029ac:	007a1200 	.word	0x007a1200
 80029b0:	08002bdc 	.word	0x08002bdc
 80029b4:	08002bec 	.word	0x08002bec

080029b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	2380      	movs	r3, #128	@ 0x80
 80029ce:	025b      	lsls	r3, r3, #9
 80029d0:	4013      	ands	r3, r2
 80029d2:	d100      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80029d4:	e08e      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80029d6:	2017      	movs	r0, #23
 80029d8:	183b      	adds	r3, r7, r0
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029de:	4b57      	ldr	r3, [pc, #348]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029e0:	69da      	ldr	r2, [r3, #28]
 80029e2:	2380      	movs	r3, #128	@ 0x80
 80029e4:	055b      	lsls	r3, r3, #21
 80029e6:	4013      	ands	r3, r2
 80029e8:	d110      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029ea:	4b54      	ldr	r3, [pc, #336]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029ec:	69da      	ldr	r2, [r3, #28]
 80029ee:	4b53      	ldr	r3, [pc, #332]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029f0:	2180      	movs	r1, #128	@ 0x80
 80029f2:	0549      	lsls	r1, r1, #21
 80029f4:	430a      	orrs	r2, r1
 80029f6:	61da      	str	r2, [r3, #28]
 80029f8:	4b50      	ldr	r3, [pc, #320]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029fa:	69da      	ldr	r2, [r3, #28]
 80029fc:	2380      	movs	r3, #128	@ 0x80
 80029fe:	055b      	lsls	r3, r3, #21
 8002a00:	4013      	ands	r3, r2
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a06:	183b      	adds	r3, r7, r0
 8002a08:	2201      	movs	r2, #1
 8002a0a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0c:	4b4c      	ldr	r3, [pc, #304]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	2380      	movs	r3, #128	@ 0x80
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	4013      	ands	r3, r2
 8002a16:	d11a      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a18:	4b49      	ldr	r3, [pc, #292]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4b48      	ldr	r3, [pc, #288]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a1e:	2180      	movs	r1, #128	@ 0x80
 8002a20:	0049      	lsls	r1, r1, #1
 8002a22:	430a      	orrs	r2, r1
 8002a24:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a26:	f7fd fe47 	bl	80006b8 <HAL_GetTick>
 8002a2a:	0003      	movs	r3, r0
 8002a2c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2e:	e008      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a30:	f7fd fe42 	bl	80006b8 <HAL_GetTick>
 8002a34:	0002      	movs	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b64      	cmp	r3, #100	@ 0x64
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e077      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a42:	4b3f      	ldr	r3, [pc, #252]	@ (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	2380      	movs	r3, #128	@ 0x80
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a50:	6a1a      	ldr	r2, [r3, #32]
 8002a52:	23c0      	movs	r3, #192	@ 0xc0
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4013      	ands	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d034      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	23c0      	movs	r3, #192	@ 0xc0
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4013      	ands	r3, r2
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d02c      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a70:	4b32      	ldr	r3, [pc, #200]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	4a33      	ldr	r2, [pc, #204]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a7a:	4b30      	ldr	r3, [pc, #192]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a7c:	6a1a      	ldr	r2, [r3, #32]
 8002a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a80:	2180      	movs	r1, #128	@ 0x80
 8002a82:	0249      	lsls	r1, r1, #9
 8002a84:	430a      	orrs	r2, r1
 8002a86:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a88:	4b2c      	ldr	r3, [pc, #176]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a8a:	6a1a      	ldr	r2, [r3, #32]
 8002a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a8e:	492e      	ldr	r1, [pc, #184]	@ (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002a90:	400a      	ands	r2, r1
 8002a92:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a94:	4b29      	ldr	r3, [pc, #164]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d013      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa2:	f7fd fe09 	bl	80006b8 <HAL_GetTick>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aaa:	e009      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aac:	f7fd fe04 	bl	80006b8 <HAL_GetTick>
 8002ab0:	0002      	movs	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	4a25      	ldr	r2, [pc, #148]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e038      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aca:	4b1c      	ldr	r3, [pc, #112]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	4a1d      	ldr	r2, [pc, #116]	@ (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	4b18      	ldr	r3, [pc, #96]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ada:	430a      	orrs	r2, r1
 8002adc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ade:	2317      	movs	r3, #23
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d105      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae8:	4b14      	ldr	r3, [pc, #80]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002aea:	69da      	ldr	r2, [r3, #28]
 8002aec:	4b13      	ldr	r3, [pc, #76]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002aee:	4918      	ldr	r1, [pc, #96]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002af0:	400a      	ands	r2, r1
 8002af2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2201      	movs	r2, #1
 8002afa:	4013      	ands	r3, r2
 8002afc:	d009      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002afe:	4b0f      	ldr	r3, [pc, #60]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	2203      	movs	r2, #3
 8002b04:	4393      	bics	r3, r2
 8002b06:	0019      	movs	r1, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2220      	movs	r2, #32
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d009      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b1c:	4b07      	ldr	r3, [pc, #28]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b20:	2210      	movs	r2, #16
 8002b22:	4393      	bics	r3, r2
 8002b24:	0019      	movs	r1, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	4b04      	ldr	r3, [pc, #16]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	0018      	movs	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b006      	add	sp, #24
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	46c0      	nop			@ (mov r8, r8)
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40007000 	.word	0x40007000
 8002b44:	fffffcff 	.word	0xfffffcff
 8002b48:	fffeffff 	.word	0xfffeffff
 8002b4c:	00001388 	.word	0x00001388
 8002b50:	efffffff 	.word	0xefffffff

08002b54 <memset>:
 8002b54:	0003      	movs	r3, r0
 8002b56:	1882      	adds	r2, r0, r2
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d100      	bne.n	8002b5e <memset+0xa>
 8002b5c:	4770      	bx	lr
 8002b5e:	7019      	strb	r1, [r3, #0]
 8002b60:	3301      	adds	r3, #1
 8002b62:	e7f9      	b.n	8002b58 <memset+0x4>

08002b64 <__libc_init_array>:
 8002b64:	b570      	push	{r4, r5, r6, lr}
 8002b66:	2600      	movs	r6, #0
 8002b68:	4c0c      	ldr	r4, [pc, #48]	@ (8002b9c <__libc_init_array+0x38>)
 8002b6a:	4d0d      	ldr	r5, [pc, #52]	@ (8002ba0 <__libc_init_array+0x3c>)
 8002b6c:	1b64      	subs	r4, r4, r5
 8002b6e:	10a4      	asrs	r4, r4, #2
 8002b70:	42a6      	cmp	r6, r4
 8002b72:	d109      	bne.n	8002b88 <__libc_init_array+0x24>
 8002b74:	2600      	movs	r6, #0
 8002b76:	f000 f819 	bl	8002bac <_init>
 8002b7a:	4c0a      	ldr	r4, [pc, #40]	@ (8002ba4 <__libc_init_array+0x40>)
 8002b7c:	4d0a      	ldr	r5, [pc, #40]	@ (8002ba8 <__libc_init_array+0x44>)
 8002b7e:	1b64      	subs	r4, r4, r5
 8002b80:	10a4      	asrs	r4, r4, #2
 8002b82:	42a6      	cmp	r6, r4
 8002b84:	d105      	bne.n	8002b92 <__libc_init_array+0x2e>
 8002b86:	bd70      	pop	{r4, r5, r6, pc}
 8002b88:	00b3      	lsls	r3, r6, #2
 8002b8a:	58eb      	ldr	r3, [r5, r3]
 8002b8c:	4798      	blx	r3
 8002b8e:	3601      	adds	r6, #1
 8002b90:	e7ee      	b.n	8002b70 <__libc_init_array+0xc>
 8002b92:	00b3      	lsls	r3, r6, #2
 8002b94:	58eb      	ldr	r3, [r5, r3]
 8002b96:	4798      	blx	r3
 8002b98:	3601      	adds	r6, #1
 8002b9a:	e7f2      	b.n	8002b82 <__libc_init_array+0x1e>
 8002b9c:	08002bfc 	.word	0x08002bfc
 8002ba0:	08002bfc 	.word	0x08002bfc
 8002ba4:	08002c00 	.word	0x08002c00
 8002ba8:	08002bfc 	.word	0x08002bfc

08002bac <_init>:
 8002bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bae:	46c0      	nop			@ (mov r8, r8)
 8002bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb2:	bc08      	pop	{r3}
 8002bb4:	469e      	mov	lr, r3
 8002bb6:	4770      	bx	lr

08002bb8 <_fini>:
 8002bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bba:	46c0      	nop			@ (mov r8, r8)
 8002bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bbe:	bc08      	pop	{r3}
 8002bc0:	469e      	mov	lr, r3
 8002bc2:	4770      	bx	lr
